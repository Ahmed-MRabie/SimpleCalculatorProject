
Calculator_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  00003c20  00003cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008001a6  008001a6  00003dfa  2**0
                  ALLOC
  3 .stab         00002604  00000000  00000000  00003dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e34  00000000  00000000  00006400  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00007234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00007414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00007646  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00009ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000b4ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000c8e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000cae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000cdef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d845  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3b       	cpi	r26, 0xBF	; 191
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5d 14 	call	0x28ba	; 0x28ba <main>
      8a:	0c 94 0e 1e 	jmp	0x3c1c	; 0x3c1c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e8       	ldi	r26, 0x85	; 133
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e8       	ldi	r24, 0x85	; 133
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e8       	ldi	r22, 0x85	; 133
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 03 1e 	jmp	0x3c06	; 0x3c06 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e3 57       	subi	r30, 0x73	; 115
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <DIO_VidSetPinDirectoin>:
#include "DIO_interface.h"


 //                           port 0---3       pin 0---7      dir 0--1
 
void DIO_VidSetPinDirectoin(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Dir){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	27 97       	sbiw	r28, 0x07	; 7
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	6a 83       	std	Y+2, r22	; 0x02
     f62:	4b 83       	std	Y+3, r20	; 0x03
	if (OUTPUT == Copy_U8Dir){
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	09 f0       	breq	.+2      	; 0xf6c <DIO_VidSetPinDirectoin+0x22>
     f6a:	6f c0       	rjmp	.+222    	; 0x104a <DIO_VidSetPinDirectoin+0x100>
		switch(Copy_U8Port){
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	3f 83       	std	Y+7, r19	; 0x07
     f74:	2e 83       	std	Y+6, r18	; 0x06
     f76:	8e 81       	ldd	r24, Y+6	; 0x06
     f78:	9f 81       	ldd	r25, Y+7	; 0x07
     f7a:	81 30       	cpi	r24, 0x01	; 1
     f7c:	91 05       	cpc	r25, r1
     f7e:	49 f1       	breq	.+82     	; 0xfd2 <DIO_VidSetPinDirectoin+0x88>
     f80:	2e 81       	ldd	r18, Y+6	; 0x06
     f82:	3f 81       	ldd	r19, Y+7	; 0x07
     f84:	22 30       	cpi	r18, 0x02	; 2
     f86:	31 05       	cpc	r19, r1
     f88:	2c f4       	brge	.+10     	; 0xf94 <DIO_VidSetPinDirectoin+0x4a>
     f8a:	8e 81       	ldd	r24, Y+6	; 0x06
     f8c:	9f 81       	ldd	r25, Y+7	; 0x07
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	61 f0       	breq	.+24     	; 0xfaa <DIO_VidSetPinDirectoin+0x60>
     f92:	d2 c0       	rjmp	.+420    	; 0x1138 <DIO_VidSetPinDirectoin+0x1ee>
     f94:	2e 81       	ldd	r18, Y+6	; 0x06
     f96:	3f 81       	ldd	r19, Y+7	; 0x07
     f98:	22 30       	cpi	r18, 0x02	; 2
     f9a:	31 05       	cpc	r19, r1
     f9c:	71 f1       	breq	.+92     	; 0xffa <DIO_VidSetPinDirectoin+0xb0>
     f9e:	8e 81       	ldd	r24, Y+6	; 0x06
     fa0:	9f 81       	ldd	r25, Y+7	; 0x07
     fa2:	83 30       	cpi	r24, 0x03	; 3
     fa4:	91 05       	cpc	r25, r1
     fa6:	e9 f1       	breq	.+122    	; 0x1022 <DIO_VidSetPinDirectoin+0xd8>
     fa8:	c7 c0       	rjmp	.+398    	; 0x1138 <DIO_VidSetPinDirectoin+0x1ee>
			case PORTA: SET_BIT(DDRA_REG,Copy_U8Pin);   break;
     faa:	aa e3       	ldi	r26, 0x3A	; 58
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	ea e3       	ldi	r30, 0x3A	; 58
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_VidSetPinDirectoin+0x7e>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_VidSetPinDirectoin+0x7a>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	b3 c0       	rjmp	.+358    	; 0x1138 <DIO_VidSetPinDirectoin+0x1ee>
			case PORTB: SET_BIT(DDRB_REG,Copy_U8Pin);   break;
     fd2:	a7 e3       	ldi	r26, 0x37	; 55
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e7 e3       	ldi	r30, 0x37	; 55
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_VidSetPinDirectoin+0xa6>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_VidSetPinDirectoin+0xa2>
     ff4:	84 2b       	or	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	9f c0       	rjmp	.+318    	; 0x1138 <DIO_VidSetPinDirectoin+0x1ee>
			case PORTC: SET_BIT(DDRC_REG,Copy_U8Pin);   break;
     ffa:	a4 e3       	ldi	r26, 0x34	; 52
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e4 e3       	ldi	r30, 0x34	; 52
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_VidSetPinDirectoin+0xce>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_VidSetPinDirectoin+0xca>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	8b c0       	rjmp	.+278    	; 0x1138 <DIO_VidSetPinDirectoin+0x1ee>
			case PORTD: SET_BIT(DDRD_REG,Copy_U8Pin);   break;
    1022:	a1 e3       	ldi	r26, 0x31	; 49
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e1 e3       	ldi	r30, 0x31	; 49
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_VidSetPinDirectoin+0xf6>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_VidSetPinDirectoin+0xf2>
    1044:	84 2b       	or	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	77 c0       	rjmp	.+238    	; 0x1138 <DIO_VidSetPinDirectoin+0x1ee>
		}
	}
	else if (INPUT == Copy_U8Dir){
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	88 23       	and	r24, r24
    104e:	09 f0       	breq	.+2      	; 0x1052 <DIO_VidSetPinDirectoin+0x108>
    1050:	73 c0       	rjmp	.+230    	; 0x1138 <DIO_VidSetPinDirectoin+0x1ee>
		switch(Copy_U8Port){
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	3d 83       	std	Y+5, r19	; 0x05
    105a:	2c 83       	std	Y+4, r18	; 0x04
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	91 05       	cpc	r25, r1
    1064:	59 f1       	breq	.+86     	; 0x10bc <DIO_VidSetPinDirectoin+0x172>
    1066:	2c 81       	ldd	r18, Y+4	; 0x04
    1068:	3d 81       	ldd	r19, Y+5	; 0x05
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	2c f4       	brge	.+10     	; 0x107a <DIO_VidSetPinDirectoin+0x130>
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	9d 81       	ldd	r25, Y+5	; 0x05
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	69 f0       	breq	.+26     	; 0x1092 <DIO_VidSetPinDirectoin+0x148>
    1078:	5f c0       	rjmp	.+190    	; 0x1138 <DIO_VidSetPinDirectoin+0x1ee>
    107a:	2c 81       	ldd	r18, Y+4	; 0x04
    107c:	3d 81       	ldd	r19, Y+5	; 0x05
    107e:	22 30       	cpi	r18, 0x02	; 2
    1080:	31 05       	cpc	r19, r1
    1082:	89 f1       	breq	.+98     	; 0x10e6 <DIO_VidSetPinDirectoin+0x19c>
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	9d 81       	ldd	r25, Y+5	; 0x05
    1088:	83 30       	cpi	r24, 0x03	; 3
    108a:	91 05       	cpc	r25, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <DIO_VidSetPinDirectoin+0x146>
    108e:	40 c0       	rjmp	.+128    	; 0x1110 <DIO_VidSetPinDirectoin+0x1c6>
    1090:	53 c0       	rjmp	.+166    	; 0x1138 <DIO_VidSetPinDirectoin+0x1ee>
			case PORTA: CLR_BIT(DDRA_REG,Copy_U8Pin);   break;
    1092:	aa e3       	ldi	r26, 0x3A	; 58
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ea e3       	ldi	r30, 0x3A	; 58
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_VidSetPinDirectoin+0x166>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_VidSetPinDirectoin+0x162>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	3e c0       	rjmp	.+124    	; 0x1138 <DIO_VidSetPinDirectoin+0x1ee>
			case PORTB: CLR_BIT(DDRB_REG,Copy_U8Pin);   break;
    10bc:	a7 e3       	ldi	r26, 0x37	; 55
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e7 e3       	ldi	r30, 0x37	; 55
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_VidSetPinDirectoin+0x190>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_VidSetPinDirectoin+0x18c>
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	29 c0       	rjmp	.+82     	; 0x1138 <DIO_VidSetPinDirectoin+0x1ee>
			case PORTC: CLR_BIT(DDRC_REG,Copy_U8Pin);   break;
    10e6:	a4 e3       	ldi	r26, 0x34	; 52
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e4 e3       	ldi	r30, 0x34	; 52
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_VidSetPinDirectoin+0x1ba>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_VidSetPinDirectoin+0x1b6>
    1108:	80 95       	com	r24
    110a:	84 23       	and	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	14 c0       	rjmp	.+40     	; 0x1138 <DIO_VidSetPinDirectoin+0x1ee>
			case PORTD: CLR_BIT(DDRD_REG,Copy_U8Pin);   break;
    1110:	a1 e3       	ldi	r26, 0x31	; 49
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e1 e3       	ldi	r30, 0x31	; 49
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_VidSetPinDirectoin+0x1e4>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_VidSetPinDirectoin+0x1e0>
    1132:	80 95       	com	r24
    1134:	84 23       	and	r24, r20
    1136:	8c 93       	st	X, r24
		}
	}
}
    1138:	27 96       	adiw	r28, 0x07	; 7
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <DIO_VidSetPinValue>:

void DIO_VidSetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Value){
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	27 97       	sbiw	r28, 0x07	; 7
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	6a 83       	std	Y+2, r22	; 0x02
    1162:	4b 83       	std	Y+3, r20	; 0x03
	if (HIGH == Copy_U8Value){
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	09 f0       	breq	.+2      	; 0x116c <DIO_VidSetPinValue+0x22>
    116a:	6f c0       	rjmp	.+222    	; 0x124a <DIO_VidSetPinValue+0x100>
		switch(Copy_U8Port){
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3f 83       	std	Y+7, r19	; 0x07
    1174:	2e 83       	std	Y+6, r18	; 0x06
    1176:	8e 81       	ldd	r24, Y+6	; 0x06
    1178:	9f 81       	ldd	r25, Y+7	; 0x07
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	91 05       	cpc	r25, r1
    117e:	49 f1       	breq	.+82     	; 0x11d2 <DIO_VidSetPinValue+0x88>
    1180:	2e 81       	ldd	r18, Y+6	; 0x06
    1182:	3f 81       	ldd	r19, Y+7	; 0x07
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	2c f4       	brge	.+10     	; 0x1194 <DIO_VidSetPinValue+0x4a>
    118a:	8e 81       	ldd	r24, Y+6	; 0x06
    118c:	9f 81       	ldd	r25, Y+7	; 0x07
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	61 f0       	breq	.+24     	; 0x11aa <DIO_VidSetPinValue+0x60>
    1192:	d2 c0       	rjmp	.+420    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
    1194:	2e 81       	ldd	r18, Y+6	; 0x06
    1196:	3f 81       	ldd	r19, Y+7	; 0x07
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	71 f1       	breq	.+92     	; 0x11fa <DIO_VidSetPinValue+0xb0>
    119e:	8e 81       	ldd	r24, Y+6	; 0x06
    11a0:	9f 81       	ldd	r25, Y+7	; 0x07
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	e9 f1       	breq	.+122    	; 0x1222 <DIO_VidSetPinValue+0xd8>
    11a8:	c7 c0       	rjmp	.+398    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			case PORTA: SET_BIT(PORTA_REG,Copy_U8Pin);   break;
    11aa:	ab e3       	ldi	r26, 0x3B	; 59
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	eb e3       	ldi	r30, 0x3B	; 59
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_VidSetPinValue+0x7e>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_VidSetPinValue+0x7a>
    11cc:	84 2b       	or	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	b3 c0       	rjmp	.+358    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			case PORTB: SET_BIT(PORTB_REG,Copy_U8Pin);   break;
    11d2:	a8 e3       	ldi	r26, 0x38	; 56
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e8 e3       	ldi	r30, 0x38	; 56
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_VidSetPinValue+0xa6>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_VidSetPinValue+0xa2>
    11f4:	84 2b       	or	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	9f c0       	rjmp	.+318    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			case PORTC: SET_BIT(PORTC_REG,Copy_U8Pin);   break;
    11fa:	a5 e3       	ldi	r26, 0x35	; 53
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e5 e3       	ldi	r30, 0x35	; 53
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_VidSetPinValue+0xce>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_VidSetPinValue+0xca>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	8b c0       	rjmp	.+278    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			case PORTD: SET_BIT(PORTD_REG,Copy_U8Pin);   break;
    1222:	a2 e3       	ldi	r26, 0x32	; 50
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e2 e3       	ldi	r30, 0x32	; 50
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_VidSetPinValue+0xf6>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_VidSetPinValue+0xf2>
    1244:	84 2b       	or	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	77 c0       	rjmp	.+238    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (LOW == Copy_U8Value){
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	88 23       	and	r24, r24
    124e:	09 f0       	breq	.+2      	; 0x1252 <DIO_VidSetPinValue+0x108>
    1250:	73 c0       	rjmp	.+230    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
		switch(Copy_U8Port){
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	3d 83       	std	Y+5, r19	; 0x05
    125a:	2c 83       	std	Y+4, r18	; 0x04
    125c:	8c 81       	ldd	r24, Y+4	; 0x04
    125e:	9d 81       	ldd	r25, Y+5	; 0x05
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	91 05       	cpc	r25, r1
    1264:	59 f1       	breq	.+86     	; 0x12bc <DIO_VidSetPinValue+0x172>
    1266:	2c 81       	ldd	r18, Y+4	; 0x04
    1268:	3d 81       	ldd	r19, Y+5	; 0x05
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	2c f4       	brge	.+10     	; 0x127a <DIO_VidSetPinValue+0x130>
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	9d 81       	ldd	r25, Y+5	; 0x05
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	69 f0       	breq	.+26     	; 0x1292 <DIO_VidSetPinValue+0x148>
    1278:	5f c0       	rjmp	.+190    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
    127a:	2c 81       	ldd	r18, Y+4	; 0x04
    127c:	3d 81       	ldd	r19, Y+5	; 0x05
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	31 05       	cpc	r19, r1
    1282:	89 f1       	breq	.+98     	; 0x12e6 <DIO_VidSetPinValue+0x19c>
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	83 30       	cpi	r24, 0x03	; 3
    128a:	91 05       	cpc	r25, r1
    128c:	09 f4       	brne	.+2      	; 0x1290 <DIO_VidSetPinValue+0x146>
    128e:	40 c0       	rjmp	.+128    	; 0x1310 <DIO_VidSetPinValue+0x1c6>
    1290:	53 c0       	rjmp	.+166    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			case PORTA: CLR_BIT(PORTA_REG,Copy_U8Pin);   break;
    1292:	ab e3       	ldi	r26, 0x3B	; 59
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	eb e3       	ldi	r30, 0x3B	; 59
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_VidSetPinValue+0x166>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_VidSetPinValue+0x162>
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	3e c0       	rjmp	.+124    	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			case PORTB: CLR_BIT(PORTB_REG,Copy_U8Pin);   break;
    12bc:	a8 e3       	ldi	r26, 0x38	; 56
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e8 e3       	ldi	r30, 0x38	; 56
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 2e       	mov	r0, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <DIO_VidSetPinValue+0x190>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <DIO_VidSetPinValue+0x18c>
    12de:	80 95       	com	r24
    12e0:	84 23       	and	r24, r20
    12e2:	8c 93       	st	X, r24
    12e4:	29 c0       	rjmp	.+82     	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			case PORTC: CLR_BIT(PORTC_REG,Copy_U8Pin);   break;
    12e6:	a5 e3       	ldi	r26, 0x35	; 53
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e5 e3       	ldi	r30, 0x35	; 53
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_VidSetPinValue+0x1ba>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_VidSetPinValue+0x1b6>
    1308:	80 95       	com	r24
    130a:	84 23       	and	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	14 c0       	rjmp	.+40     	; 0x1338 <DIO_VidSetPinValue+0x1ee>
			case PORTD: CLR_BIT(PORTD_REG,Copy_U8Pin);   break;
    1310:	a2 e3       	ldi	r26, 0x32	; 50
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e2 e3       	ldi	r30, 0x32	; 50
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_VidSetPinValue+0x1e4>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_VidSetPinValue+0x1e0>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
		}
	}
}
    1338:	27 96       	adiw	r28, 0x07	; 7
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin){
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	00 d0       	rcall	.+0      	; 0x1350 <DIO_U8GetPinValue+0x6>
    1350:	00 d0       	rcall	.+0      	; 0x1352 <DIO_U8GetPinValue+0x8>
    1352:	0f 92       	push	r0
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	8a 83       	std	Y+2, r24	; 0x02
    135a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_ReturnValue;
	switch(Copy_U8Port){
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	3d 83       	std	Y+5, r19	; 0x05
    1364:	2c 83       	std	Y+4, r18	; 0x04
    1366:	4c 81       	ldd	r20, Y+4	; 0x04
    1368:	5d 81       	ldd	r21, Y+5	; 0x05
    136a:	41 30       	cpi	r20, 0x01	; 1
    136c:	51 05       	cpc	r21, r1
    136e:	41 f1       	breq	.+80     	; 0x13c0 <DIO_U8GetPinValue+0x76>
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	91 05       	cpc	r25, r1
    1378:	34 f4       	brge	.+12     	; 0x1386 <DIO_U8GetPinValue+0x3c>
    137a:	2c 81       	ldd	r18, Y+4	; 0x04
    137c:	3d 81       	ldd	r19, Y+5	; 0x05
    137e:	21 15       	cp	r18, r1
    1380:	31 05       	cpc	r19, r1
    1382:	61 f0       	breq	.+24     	; 0x139c <DIO_U8GetPinValue+0x52>
    1384:	52 c0       	rjmp	.+164    	; 0x142a <DIO_U8GetPinValue+0xe0>
    1386:	4c 81       	ldd	r20, Y+4	; 0x04
    1388:	5d 81       	ldd	r21, Y+5	; 0x05
    138a:	42 30       	cpi	r20, 0x02	; 2
    138c:	51 05       	cpc	r21, r1
    138e:	51 f1       	breq	.+84     	; 0x13e4 <DIO_U8GetPinValue+0x9a>
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	9d 81       	ldd	r25, Y+5	; 0x05
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	b9 f1       	breq	.+110    	; 0x1408 <DIO_U8GetPinValue+0xbe>
    139a:	47 c0       	rjmp	.+142    	; 0x142a <DIO_U8GetPinValue+0xe0>
		case PORTA: Local_ReturnValue = GET_BIT(PINA_REG,Copy_U8Pin);   break;
    139c:	e9 e3       	ldi	r30, 0x39	; 57
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a9 01       	movw	r20, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_U8GetPinValue+0x6a>
    13b0:	55 95       	asr	r21
    13b2:	47 95       	ror	r20
    13b4:	8a 95       	dec	r24
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_U8GetPinValue+0x66>
    13b8:	ca 01       	movw	r24, r20
    13ba:	81 70       	andi	r24, 0x01	; 1
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	35 c0       	rjmp	.+106    	; 0x142a <DIO_U8GetPinValue+0xe0>
		case PORTB: Local_ReturnValue = GET_BIT(PINB_REG,Copy_U8Pin);   break;
    13c0:	e6 e3       	ldi	r30, 0x36	; 54
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a9 01       	movw	r20, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_U8GetPinValue+0x8e>
    13d4:	55 95       	asr	r21
    13d6:	47 95       	ror	r20
    13d8:	8a 95       	dec	r24
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_U8GetPinValue+0x8a>
    13dc:	ca 01       	movw	r24, r20
    13de:	81 70       	andi	r24, 0x01	; 1
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	23 c0       	rjmp	.+70     	; 0x142a <DIO_U8GetPinValue+0xe0>
		case PORTC: Local_ReturnValue = GET_BIT(PINC_REG,Copy_U8Pin);   break;
    13e4:	e3 e3       	ldi	r30, 0x33	; 51
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	a9 01       	movw	r20, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <DIO_U8GetPinValue+0xb2>
    13f8:	55 95       	asr	r21
    13fa:	47 95       	ror	r20
    13fc:	8a 95       	dec	r24
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <DIO_U8GetPinValue+0xae>
    1400:	ca 01       	movw	r24, r20
    1402:	81 70       	andi	r24, 0x01	; 1
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	11 c0       	rjmp	.+34     	; 0x142a <DIO_U8GetPinValue+0xe0>
		case PORTD: Local_ReturnValue = GET_BIT(PIND_REG,Copy_U8Pin);   break;
    1408:	e0 e3       	ldi	r30, 0x30	; 48
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a9 01       	movw	r20, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_U8GetPinValue+0xd6>
    141c:	55 95       	asr	r21
    141e:	47 95       	ror	r20
    1420:	8a 95       	dec	r24
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_U8GetPinValue+0xd2>
    1424:	ca 01       	movw	r24, r20
    1426:	81 70       	andi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ReturnValue;
    142a:	89 81       	ldd	r24, Y+1	; 0x01
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <DIO_VidTogglePinValue>:

void DIO_VidTogglePinValue(u8 Copy_U8Port,u8 Copy_U8Pin){
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <DIO_VidTogglePinValue+0x6>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <DIO_VidTogglePinValue+0x8>
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port){
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	3c 83       	std	Y+4, r19	; 0x04
    1454:	2b 83       	std	Y+3, r18	; 0x03
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	91 05       	cpc	r25, r1
    145e:	49 f1       	breq	.+82     	; 0x14b2 <DIO_VidTogglePinValue+0x76>
    1460:	2b 81       	ldd	r18, Y+3	; 0x03
    1462:	3c 81       	ldd	r19, Y+4	; 0x04
    1464:	22 30       	cpi	r18, 0x02	; 2
    1466:	31 05       	cpc	r19, r1
    1468:	2c f4       	brge	.+10     	; 0x1474 <DIO_VidTogglePinValue+0x38>
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	61 f0       	breq	.+24     	; 0x148a <DIO_VidTogglePinValue+0x4e>
    1472:	5a c0       	rjmp	.+180    	; 0x1528 <DIO_VidTogglePinValue+0xec>
    1474:	2b 81       	ldd	r18, Y+3	; 0x03
    1476:	3c 81       	ldd	r19, Y+4	; 0x04
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 05       	cpc	r19, r1
    147c:	71 f1       	breq	.+92     	; 0x14da <DIO_VidTogglePinValue+0x9e>
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	91 05       	cpc	r25, r1
    1486:	e9 f1       	breq	.+122    	; 0x1502 <DIO_VidTogglePinValue+0xc6>
    1488:	4f c0       	rjmp	.+158    	; 0x1528 <DIO_VidTogglePinValue+0xec>
		case PORTA: TOGGLE_BIT(PORTA_REG,Copy_U8Pin);   break;
    148a:	ab e3       	ldi	r26, 0x3B	; 59
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	eb e3       	ldi	r30, 0x3B	; 59
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_VidTogglePinValue+0x6c>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_VidTogglePinValue+0x68>
    14ac:	84 27       	eor	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	3b c0       	rjmp	.+118    	; 0x1528 <DIO_VidTogglePinValue+0xec>
		case PORTB: TOGGLE_BIT(PORTB_REG,Copy_U8Pin);   break;
    14b2:	a8 e3       	ldi	r26, 0x38	; 56
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e8 e3       	ldi	r30, 0x38	; 56
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_VidTogglePinValue+0x94>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_VidTogglePinValue+0x90>
    14d4:	84 27       	eor	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	27 c0       	rjmp	.+78     	; 0x1528 <DIO_VidTogglePinValue+0xec>
		case PORTC: TOGGLE_BIT(PORTC_REG,Copy_U8Pin);   break;
    14da:	a5 e3       	ldi	r26, 0x35	; 53
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e5 e3       	ldi	r30, 0x35	; 53
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_VidTogglePinValue+0xbc>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_VidTogglePinValue+0xb8>
    14fc:	84 27       	eor	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	13 c0       	rjmp	.+38     	; 0x1528 <DIO_VidTogglePinValue+0xec>
		case PORTD: TOGGLE_BIT(PORTD_REG,Copy_U8Pin);   break;
    1502:	a2 e3       	ldi	r26, 0x32	; 50
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e2 e3       	ldi	r30, 0x32	; 50
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_VidTogglePinValue+0xe4>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <DIO_VidTogglePinValue+0xe0>
    1524:	84 27       	eor	r24, r20
    1526:	8c 93       	st	X, r24
	}
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <DIO_VidSetPortValue>:

void DIO_VidSetPortValue(u8 Copy_U8Port,u8 Copy_U8Value){
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	00 d0       	rcall	.+0      	; 0x153c <DIO_VidSetPortValue+0x6>
    153c:	00 d0       	rcall	.+0      	; 0x153e <DIO_VidSetPortValue+0x8>
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port){
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	3c 83       	std	Y+4, r19	; 0x04
    154e:	2b 83       	std	Y+3, r18	; 0x03
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	91 05       	cpc	r25, r1
    1558:	d1 f0       	breq	.+52     	; 0x158e <DIO_VidSetPortValue+0x58>
    155a:	2b 81       	ldd	r18, Y+3	; 0x03
    155c:	3c 81       	ldd	r19, Y+4	; 0x04
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	2c f4       	brge	.+10     	; 0x156e <DIO_VidSetPortValue+0x38>
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	61 f0       	breq	.+24     	; 0x1584 <DIO_VidSetPortValue+0x4e>
    156c:	1e c0       	rjmp	.+60     	; 0x15aa <DIO_VidSetPortValue+0x74>
    156e:	2b 81       	ldd	r18, Y+3	; 0x03
    1570:	3c 81       	ldd	r19, Y+4	; 0x04
    1572:	22 30       	cpi	r18, 0x02	; 2
    1574:	31 05       	cpc	r19, r1
    1576:	81 f0       	breq	.+32     	; 0x1598 <DIO_VidSetPortValue+0x62>
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	91 05       	cpc	r25, r1
    1580:	81 f0       	breq	.+32     	; 0x15a2 <DIO_VidSetPortValue+0x6c>
    1582:	13 c0       	rjmp	.+38     	; 0x15aa <DIO_VidSetPortValue+0x74>
		case PORTA: PORTA_REG = Copy_U8Value;   break;
    1584:	eb e3       	ldi	r30, 0x3B	; 59
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	80 83       	st	Z, r24
    158c:	0e c0       	rjmp	.+28     	; 0x15aa <DIO_VidSetPortValue+0x74>
		case PORTB: PORTB_REG = Copy_U8Value;   break;
    158e:	e8 e3       	ldi	r30, 0x38	; 56
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	80 83       	st	Z, r24
    1596:	09 c0       	rjmp	.+18     	; 0x15aa <DIO_VidSetPortValue+0x74>
		case PORTC: PORTC_REG = Copy_U8Value;   break;
    1598:	e5 e3       	ldi	r30, 0x35	; 53
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	80 83       	st	Z, r24
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <DIO_VidSetPortValue+0x74>
		case PORTD: PORTD_REG = Copy_U8Value;   break;
    15a2:	e2 e3       	ldi	r30, 0x32	; 50
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	80 83       	st	Z, r24
	}
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <DIO_VidSetPortDirectoin>:

void DIO_VidSetPortDirectoin(u8 Copy_U8Port,u8 Copy_U8Dir){
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	00 d0       	rcall	.+0      	; 0x15be <DIO_VidSetPortDirectoin+0x6>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <DIO_VidSetPortDirectoin+0x8>
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port){
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	3c 83       	std	Y+4, r19	; 0x04
    15d0:	2b 83       	std	Y+3, r18	; 0x03
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	91 05       	cpc	r25, r1
    15da:	d1 f0       	breq	.+52     	; 0x1610 <DIO_VidSetPortDirectoin+0x58>
    15dc:	2b 81       	ldd	r18, Y+3	; 0x03
    15de:	3c 81       	ldd	r19, Y+4	; 0x04
    15e0:	22 30       	cpi	r18, 0x02	; 2
    15e2:	31 05       	cpc	r19, r1
    15e4:	2c f4       	brge	.+10     	; 0x15f0 <DIO_VidSetPortDirectoin+0x38>
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	61 f0       	breq	.+24     	; 0x1606 <DIO_VidSetPortDirectoin+0x4e>
    15ee:	1e c0       	rjmp	.+60     	; 0x162c <DIO_VidSetPortDirectoin+0x74>
    15f0:	2b 81       	ldd	r18, Y+3	; 0x03
    15f2:	3c 81       	ldd	r19, Y+4	; 0x04
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	81 f0       	breq	.+32     	; 0x161a <DIO_VidSetPortDirectoin+0x62>
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	91 05       	cpc	r25, r1
    1602:	81 f0       	breq	.+32     	; 0x1624 <DIO_VidSetPortDirectoin+0x6c>
    1604:	13 c0       	rjmp	.+38     	; 0x162c <DIO_VidSetPortDirectoin+0x74>
		case PORTA: DDRA_REG = Copy_U8Dir;  break;
    1606:	ea e3       	ldi	r30, 0x3A	; 58
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	80 83       	st	Z, r24
    160e:	0e c0       	rjmp	.+28     	; 0x162c <DIO_VidSetPortDirectoin+0x74>
		case PORTB: DDRB_REG = Copy_U8Dir;  break;
    1610:	e7 e3       	ldi	r30, 0x37	; 55
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	80 83       	st	Z, r24
    1618:	09 c0       	rjmp	.+18     	; 0x162c <DIO_VidSetPortDirectoin+0x74>
		case PORTC: DDRC_REG = Copy_U8Dir;  break;
    161a:	e4 e3       	ldi	r30, 0x34	; 52
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	80 83       	st	Z, r24
    1622:	04 c0       	rjmp	.+8      	; 0x162c <DIO_VidSetPortDirectoin+0x74>
		case PORTD: DDRD_REG = Copy_U8Dir;  break;
    1624:	e1 e3       	ldi	r30, 0x31	; 49
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	80 83       	st	Z, r24
	}

}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <KPD_VidInitc>:
};
#endif



void KPD_VidInitc(void){
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPortDirectoin(KPD_PORT , KPD_DIR);
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	6f e0       	ldi	r22, 0x0F	; 15
    1646:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <DIO_VidSetPortDirectoin>
	DIO_VidSetPortValue(KPD_PORT , KPD_PORT_Value);
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	6f ef       	ldi	r22, 0xFF	; 255
    164e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_VidSetPortValue>
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <KPD_U8GetPressedKey>:



u8 KPD_U8GetPressedKey(void){
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	62 97       	sbiw	r28, 0x12	; 18
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8Key = KPD_U8_KEY_NOT_PRESSED;
    166c:	82 e3       	ldi	r24, 0x32	; 50
    166e:	8a 8b       	std	Y+18, r24	; 0x12
	u8 LOC_U8Pressed;
	u8 LOC_U8RowCounter;
	u8 LOC_U8ColumnCounter;

	/* Activate Each Row */
	for( LOC_U8RowCounter = 0 ; LOC_U8RowCounter < KPD_ROW_NUM ; LOC_U8RowCounter++)
    1670:	18 8a       	std	Y+16, r1	; 0x10
    1672:	d4 c0       	rjmp	.+424    	; 0x181c <KPD_U8GetPressedKey+0x1c4>
	{
		DIO_VidSetPinValue(KPD_PORT , KPD_Au8RowsPins[LOC_U8RowCounter], LOW);
    1674:	88 89       	ldd	r24, Y+16	; 0x10
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	fc 01       	movw	r30, r24
    167c:	e3 57       	subi	r30, 0x73	; 115
    167e:	fe 4f       	sbci	r31, 0xFE	; 254
    1680:	90 81       	ld	r25, Z
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	69 2f       	mov	r22, r25
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>

		/* Check which input pins has zero */
		for( LOC_U8ColumnCounter = 0 ; LOC_U8ColumnCounter < KPD_COL_NUM ; LOC_U8ColumnCounter++)
    168c:	1f 86       	std	Y+15, r1	; 0x0f
    168e:	b3 c0       	rjmp	.+358    	; 0x17f6 <KPD_U8GetPressedKey+0x19e>
		{
			LOC_U8Pressed = DIO_U8GetPinValue( KPD_PORT , KPD_Au8ColsPins[LOC_U8ColumnCounter] );
    1690:	8f 85       	ldd	r24, Y+15	; 0x0f
    1692:	88 2f       	mov	r24, r24
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	fc 01       	movw	r30, r24
    1698:	ef 56       	subi	r30, 0x6F	; 111
    169a:	fe 4f       	sbci	r31, 0xFE	; 254
    169c:	90 81       	ld	r25, Z
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	69 2f       	mov	r22, r25
    16a2:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_U8GetPinValue>
    16a6:	89 8b       	std	Y+17, r24	; 0x11
			if( LOW == LOC_U8Pressed ) /* Switch is Pressed */
    16a8:	89 89       	ldd	r24, Y+17	; 0x11
    16aa:	88 23       	and	r24, r24
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <KPD_U8GetPressedKey+0x58>
    16ae:	a0 c0       	rjmp	.+320    	; 0x17f0 <KPD_U8GetPressedKey+0x198>
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a0 ea       	ldi	r26, 0xA0	; 160
    16b6:	b0 e4       	ldi	r27, 0x40	; 64
    16b8:	8b 87       	std	Y+11, r24	; 0x0b
    16ba:	9c 87       	std	Y+12, r25	; 0x0c
    16bc:	ad 87       	std	Y+13, r26	; 0x0d
    16be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	4a ef       	ldi	r20, 0xFA	; 250
    16ce:	54 e4       	ldi	r21, 0x44	; 68
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	8f 83       	std	Y+7, r24	; 0x07
    16da:	98 87       	std	Y+8, r25	; 0x08
    16dc:	a9 87       	std	Y+9, r26	; 0x09
    16de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e8       	ldi	r20, 0x80	; 128
    16ee:	5f e3       	ldi	r21, 0x3F	; 63
    16f0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    16f4:	88 23       	and	r24, r24
    16f6:	2c f4       	brge	.+10     	; 0x1702 <KPD_U8GetPressedKey+0xaa>
		__ticks = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	3f c0       	rjmp	.+126    	; 0x1780 <KPD_U8GetPressedKey+0x128>
	else if (__tmp > 65535)
    1702:	6f 81       	ldd	r22, Y+7	; 0x07
    1704:	78 85       	ldd	r23, Y+8	; 0x08
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	57 e4       	ldi	r21, 0x47	; 71
    1712:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	4c f5       	brge	.+82     	; 0x176c <KPD_U8GetPressedKey+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171a:	6b 85       	ldd	r22, Y+11	; 0x0b
    171c:	7c 85       	ldd	r23, Y+12	; 0x0c
    171e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1720:	9e 85       	ldd	r25, Y+14	; 0x0e
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e2       	ldi	r20, 0x20	; 32
    1728:	51 e4       	ldi	r21, 0x41	; 65
    172a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <KPD_U8GetPressedKey+0x10a>
    1744:	88 ec       	ldi	r24, 0xC8	; 200
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9c 83       	std	Y+4, r25	; 0x04
    174a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <KPD_U8GetPressedKey+0xf8>
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	69 f7       	brne	.-38     	; 0x1744 <KPD_U8GetPressedKey+0xec>
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <KPD_U8GetPressedKey+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176c:	6f 81       	ldd	r22, Y+7	; 0x07
    176e:	78 85       	ldd	r23, Y+8	; 0x08
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9e 83       	std	Y+6, r25	; 0x06
    177e:	8d 83       	std	Y+5, r24	; 0x05
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <KPD_U8GetPressedKey+0x134>
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
			{
				/* Debouncing*/
				_delay_ms(5);
				LOC_U8Pressed = DIO_U8GetPinValue( KPD_PORT , KPD_Au8ColsPins[LOC_U8ColumnCounter] );
    1794:	8f 85       	ldd	r24, Y+15	; 0x0f
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	fc 01       	movw	r30, r24
    179c:	ef 56       	subi	r30, 0x6F	; 111
    179e:	fe 4f       	sbci	r31, 0xFE	; 254
    17a0:	90 81       	ld	r25, Z
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	69 2f       	mov	r22, r25
    17a6:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_U8GetPinValue>
    17aa:	89 8b       	std	Y+17, r24	; 0x11
    17ac:	0c c0       	rjmp	.+24     	; 0x17c6 <KPD_U8GetPressedKey+0x16e>
				/* Check if Pin is still LOW */
				while ( LOW == LOC_U8Pressed )
				{
					LOC_U8Pressed = DIO_U8GetPinValue( KPD_PORT , KPD_Au8ColsPins[LOC_U8ColumnCounter] );
    17ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	fc 01       	movw	r30, r24
    17b6:	ef 56       	subi	r30, 0x6F	; 111
    17b8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ba:	90 81       	ld	r25, Z
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	69 2f       	mov	r22, r25
    17c0:	0e 94 a5 09 	call	0x134a	; 0x134a <DIO_U8GetPinValue>
    17c4:	89 8b       	std	Y+17, r24	; 0x11
			{
				/* Debouncing*/
				_delay_ms(5);
				LOC_U8Pressed = DIO_U8GetPinValue( KPD_PORT , KPD_Au8ColsPins[LOC_U8ColumnCounter] );
				/* Check if Pin is still LOW */
				while ( LOW == LOC_U8Pressed )
    17c6:	89 89       	ldd	r24, Y+17	; 0x11
    17c8:	88 23       	and	r24, r24
    17ca:	89 f3       	breq	.-30     	; 0x17ae <KPD_U8GetPressedKey+0x156>
				{
					LOC_U8Pressed = DIO_U8GetPinValue( KPD_PORT , KPD_Au8ColsPins[LOC_U8ColumnCounter] );
				}
				/* Show the key*/
				LOC_U8Key = KPD_Au8Keys[LOC_U8RowCounter][LOC_U8ColumnCounter];
    17cc:	88 89       	ldd	r24, Y+16	; 0x10
    17ce:	48 2f       	mov	r20, r24
    17d0:	50 e0       	ldi	r21, 0x00	; 0
    17d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	ca 01       	movw	r24, r20
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	82 0f       	add	r24, r18
    17e4:	93 1f       	adc	r25, r19
    17e6:	fc 01       	movw	r30, r24
    17e8:	eb 56       	subi	r30, 0x6B	; 107
    17ea:	fe 4f       	sbci	r31, 0xFE	; 254
    17ec:	80 81       	ld	r24, Z
    17ee:	8a 8b       	std	Y+18, r24	; 0x12
	for( LOC_U8RowCounter = 0 ; LOC_U8RowCounter < KPD_ROW_NUM ; LOC_U8RowCounter++)
	{
		DIO_VidSetPinValue(KPD_PORT , KPD_Au8RowsPins[LOC_U8RowCounter], LOW);

		/* Check which input pins has zero */
		for( LOC_U8ColumnCounter = 0 ; LOC_U8ColumnCounter < KPD_COL_NUM ; LOC_U8ColumnCounter++)
    17f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f2:	8f 5f       	subi	r24, 0xFF	; 255
    17f4:	8f 87       	std	Y+15, r24	; 0x0f
    17f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f8:	84 30       	cpi	r24, 0x04	; 4
    17fa:	08 f4       	brcc	.+2      	; 0x17fe <KPD_U8GetPressedKey+0x1a6>
    17fc:	49 cf       	rjmp	.-366    	; 0x1690 <KPD_U8GetPressedKey+0x38>
				}
				/* Show the key*/
				LOC_U8Key = KPD_Au8Keys[LOC_U8RowCounter][LOC_U8ColumnCounter];
			}
		}
		DIO_VidSetPinValue(KPD_PORT , KPD_Au8RowsPins[LOC_U8RowCounter], HIGH);
    17fe:	88 89       	ldd	r24, Y+16	; 0x10
    1800:	88 2f       	mov	r24, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	fc 01       	movw	r30, r24
    1806:	e3 57       	subi	r30, 0x73	; 115
    1808:	fe 4f       	sbci	r31, 0xFE	; 254
    180a:	90 81       	ld	r25, Z
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	69 2f       	mov	r22, r25
    1810:	41 e0       	ldi	r20, 0x01	; 1
    1812:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
	u8 LOC_U8Pressed;
	u8 LOC_U8RowCounter;
	u8 LOC_U8ColumnCounter;

	/* Activate Each Row */
	for( LOC_U8RowCounter = 0 ; LOC_U8RowCounter < KPD_ROW_NUM ; LOC_U8RowCounter++)
    1816:	88 89       	ldd	r24, Y+16	; 0x10
    1818:	8f 5f       	subi	r24, 0xFF	; 255
    181a:	88 8b       	std	Y+16, r24	; 0x10
    181c:	88 89       	ldd	r24, Y+16	; 0x10
    181e:	84 30       	cpi	r24, 0x04	; 4
    1820:	08 f4       	brcc	.+2      	; 0x1824 <KPD_U8GetPressedKey+0x1cc>
    1822:	28 cf       	rjmp	.-432    	; 0x1674 <KPD_U8GetPressedKey+0x1c>
				LOC_U8Key = KPD_Au8Keys[LOC_U8RowCounter][LOC_U8ColumnCounter];
			}
		}
		DIO_VidSetPinValue(KPD_PORT , KPD_Au8RowsPins[LOC_U8RowCounter], HIGH);
	}
	return LOC_U8Key;
    1824:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1826:	62 96       	adiw	r28, 0x12	; 18
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <LCD_VidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_cfg.h"


void LCD_VidInit(void){
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	cc 54       	subi	r28, 0x4C	; 76
    1846:	d0 40       	sbci	r29, 0x00	; 0
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
	//LCD_ControlPort(A-0) PinOut(0,1,2)
	DIO_VidSetPortDirectoin(LCD_ControlPort,0xff);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	6f ef       	ldi	r22, 0xFF	; 255
    1856:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <DIO_VidSetPortDirectoin>
	DIO_VidSetPinValue(LCD_ControlPort,LCD_RS_Pin,HIGH);
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_ControlPort,LCD_RW_Pin,HIGH);
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_ControlPort,LCD_E_Pin,HIGH);
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	62 e0       	ldi	r22, 0x02	; 2
    1872:	41 e0       	ldi	r20, 0x01	; 1
    1874:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
	//LCD_DataPort(C-2)  AllPinsOut(0xff)
	DIO_VidSetPortDirectoin(LCD_DataPort,0xff);
    1878:	83 e0       	ldi	r24, 0x03	; 3
    187a:	6f ef       	ldi	r22, 0xFF	; 255
    187c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <DIO_VidSetPortDirectoin>
	DIO_VidSetPortValue(LCD_DataPort,0);
    1880:	83 e0       	ldi	r24, 0x03	; 3
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_VidSetPortValue>
    1888:	fe 01       	movw	r30, r28
    188a:	e7 5b       	subi	r30, 0xB7	; 183
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	ac e0       	ldi	r26, 0x0C	; 12
    1894:	b2 e4       	ldi	r27, 0x42	; 66
    1896:	80 83       	st	Z, r24
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	a2 83       	std	Z+2, r26	; 0x02
    189c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189e:	8e 01       	movw	r16, r28
    18a0:	0b 5b       	subi	r16, 0xBB	; 187
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	fe 01       	movw	r30, r28
    18a6:	e7 5b       	subi	r30, 0xB7	; 183
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	60 81       	ld	r22, Z
    18ac:	71 81       	ldd	r23, Z+1	; 0x01
    18ae:	82 81       	ldd	r24, Z+2	; 0x02
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4a ef       	ldi	r20, 0xFA	; 250
    18b8:	54 e4       	ldi	r21, 0x44	; 68
    18ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	f8 01       	movw	r30, r16
    18c4:	80 83       	st	Z, r24
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	a2 83       	std	Z+2, r26	; 0x02
    18ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18cc:	fe 01       	movw	r30, r28
    18ce:	eb 5b       	subi	r30, 0xBB	; 187
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	60 81       	ld	r22, Z
    18d4:	71 81       	ldd	r23, Z+1	; 0x01
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	44 f4       	brge	.+16     	; 0x18fa <LCD_VidInit+0xc2>
		__ticks = 1;
    18ea:	fe 01       	movw	r30, r28
    18ec:	ed 5b       	subi	r30, 0xBD	; 189
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
    18f8:	64 c0       	rjmp	.+200    	; 0x19c2 <LCD_VidInit+0x18a>
	else if (__tmp > 65535)
    18fa:	fe 01       	movw	r30, r28
    18fc:	eb 5b       	subi	r30, 0xBB	; 187
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	60 81       	ld	r22, Z
    1902:	71 81       	ldd	r23, Z+1	; 0x01
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	93 81       	ldd	r25, Z+3	; 0x03
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	3f ef       	ldi	r19, 0xFF	; 255
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	57 e4       	ldi	r21, 0x47	; 71
    1910:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	0c f0       	brlt	.+2      	; 0x191a <LCD_VidInit+0xe2>
    1918:	43 c0       	rjmp	.+134    	; 0x19a0 <LCD_VidInit+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191a:	fe 01       	movw	r30, r28
    191c:	e7 5b       	subi	r30, 0xB7	; 183
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	60 81       	ld	r22, Z
    1922:	71 81       	ldd	r23, Z+1	; 0x01
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	51 e4       	ldi	r21, 0x41	; 65
    1930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	8e 01       	movw	r16, r28
    193a:	0d 5b       	subi	r16, 0xBD	; 189
    193c:	1f 4f       	sbci	r17, 0xFF	; 255
    193e:	bc 01       	movw	r22, r24
    1940:	cd 01       	movw	r24, r26
    1942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	f8 01       	movw	r30, r16
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
    1950:	1f c0       	rjmp	.+62     	; 0x1990 <LCD_VidInit+0x158>
    1952:	fe 01       	movw	r30, r28
    1954:	ef 5b       	subi	r30, 0xBF	; 191
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	88 ec       	ldi	r24, 0xC8	; 200
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
    1960:	fe 01       	movw	r30, r28
    1962:	ef 5b       	subi	r30, 0xBF	; 191
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	80 81       	ld	r24, Z
    1968:	91 81       	ldd	r25, Z+1	; 0x01
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <LCD_VidInit+0x132>
    196e:	fe 01       	movw	r30, r28
    1970:	ef 5b       	subi	r30, 0xBF	; 191
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	de 01       	movw	r26, r28
    197a:	ad 5b       	subi	r26, 0xBD	; 189
    197c:	bf 4f       	sbci	r27, 0xFF	; 255
    197e:	fe 01       	movw	r30, r28
    1980:	ed 5b       	subi	r30, 0xBD	; 189
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 81       	ld	r24, Z
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	11 96       	adiw	r26, 0x01	; 1
    198c:	9c 93       	st	X, r25
    198e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1990:	fe 01       	movw	r30, r28
    1992:	ed 5b       	subi	r30, 0xBD	; 189
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	d1 f6       	brne	.-76     	; 0x1952 <LCD_VidInit+0x11a>
    199e:	24 c0       	rjmp	.+72     	; 0x19e8 <LCD_VidInit+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a0:	8e 01       	movw	r16, r28
    19a2:	0d 5b       	subi	r16, 0xBD	; 189
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	fe 01       	movw	r30, r28
    19a8:	eb 5b       	subi	r30, 0xBB	; 187
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	f8 01       	movw	r30, r16
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
    19c2:	fe 01       	movw	r30, r28
    19c4:	ed 5b       	subi	r30, 0xBD	; 189
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	fe 01       	movw	r30, r28
    19ce:	ff 96       	adiw	r30, 0x3f	; 63
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	80 83       	st	Z, r24
    19d4:	fe 01       	movw	r30, r28
    19d6:	ff 96       	adiw	r30, 0x3f	; 63
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_VidInit+0x1a4>
    19e0:	fe 01       	movw	r30, r28
    19e2:	ff 96       	adiw	r30, 0x3f	; 63
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24

#if LCD_MOOD_SELECITION == LCD_8_BIT_INITIZATION
	_delay_ms(35);
	/* Function Set Comnd */
	LCD_vidSendComnd(LCD_FunctionSetComnd);
    19e8:	88 e3       	ldi	r24, 0x38	; 56
    19ea:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_vidSendComnd>
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a0 e2       	ldi	r26, 0x20	; 32
    19f4:	b2 e4       	ldi	r27, 0x42	; 66
    19f6:	8b af       	std	Y+59, r24	; 0x3b
    19f8:	9c af       	std	Y+60, r25	; 0x3c
    19fa:	ad af       	std	Y+61, r26	; 0x3d
    19fc:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19fe:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a00:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a02:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a04:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a06:	2b ea       	ldi	r18, 0xAB	; 171
    1a08:	3a ea       	ldi	r19, 0xAA	; 170
    1a0a:	4a e2       	ldi	r20, 0x2A	; 42
    1a0c:	50 e4       	ldi	r21, 0x40	; 64
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	8f ab       	std	Y+55, r24	; 0x37
    1a18:	98 af       	std	Y+56, r25	; 0x38
    1a1a:	a9 af       	std	Y+57, r26	; 0x39
    1a1c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a1e:	6f a9       	ldd	r22, Y+55	; 0x37
    1a20:	78 ad       	ldd	r23, Y+56	; 0x38
    1a22:	89 ad       	ldd	r24, Y+57	; 0x39
    1a24:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e8       	ldi	r20, 0x80	; 128
    1a2c:	5f e3       	ldi	r21, 0x3F	; 63
    1a2e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1a32:	88 23       	and	r24, r24
    1a34:	1c f4       	brge	.+6      	; 0x1a3c <LCD_VidInit+0x204>
		__ticks = 1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	8e ab       	std	Y+54, r24	; 0x36
    1a3a:	91 c0       	rjmp	.+290    	; 0x1b5e <LCD_VidInit+0x326>
	else if (__tmp > 255)
    1a3c:	6f a9       	ldd	r22, Y+55	; 0x37
    1a3e:	78 ad       	ldd	r23, Y+56	; 0x38
    1a40:	89 ad       	ldd	r24, Y+57	; 0x39
    1a42:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	4f e7       	ldi	r20, 0x7F	; 127
    1a4a:	53 e4       	ldi	r21, 0x43	; 67
    1a4c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a50:	18 16       	cp	r1, r24
    1a52:	0c f0       	brlt	.+2      	; 0x1a56 <LCD_VidInit+0x21e>
    1a54:	7b c0       	rjmp	.+246    	; 0x1b4c <LCD_VidInit+0x314>
	{
		_delay_ms(__us / 1000.0);
    1a56:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a58:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	4a e7       	ldi	r20, 0x7A	; 122
    1a64:	54 e4       	ldi	r21, 0x44	; 68
    1a66:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	8a ab       	std	Y+50, r24	; 0x32
    1a70:	9b ab       	std	Y+51, r25	; 0x33
    1a72:	ac ab       	std	Y+52, r26	; 0x34
    1a74:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	6a a9       	ldd	r22, Y+50	; 0x32
    1a78:	7b a9       	ldd	r23, Y+51	; 0x33
    1a7a:	8c a9       	ldd	r24, Y+52	; 0x34
    1a7c:	9d a9       	ldd	r25, Y+53	; 0x35
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a ef       	ldi	r20, 0xFA	; 250
    1a84:	54 e4       	ldi	r21, 0x44	; 68
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8e a7       	std	Y+46, r24	; 0x2e
    1a90:	9f a7       	std	Y+47, r25	; 0x2f
    1a92:	a8 ab       	std	Y+48, r26	; 0x30
    1a94:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a96:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a98:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a9a:	88 a9       	ldd	r24, Y+48	; 0x30
    1a9c:	99 a9       	ldd	r25, Y+49	; 0x31
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <LCD_VidInit+0x280>
		__ticks = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9d a7       	std	Y+45, r25	; 0x2d
    1ab4:	8c a7       	std	Y+44, r24	; 0x2c
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <LCD_VidInit+0x2fe>
	else if (__tmp > 65535)
    1ab8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1aba:	7f a5       	ldd	r23, Y+47	; 0x2f
    1abc:	88 a9       	ldd	r24, Y+48	; 0x30
    1abe:	99 a9       	ldd	r25, Y+49	; 0x31
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	57 e4       	ldi	r21, 0x47	; 71
    1ac8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1acc:	18 16       	cp	r1, r24
    1ace:	4c f5       	brge	.+82     	; 0x1b22 <LCD_VidInit+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	6a a9       	ldd	r22, Y+50	; 0x32
    1ad2:	7b a9       	ldd	r23, Y+51	; 0x33
    1ad4:	8c a9       	ldd	r24, Y+52	; 0x34
    1ad6:	9d a9       	ldd	r25, Y+53	; 0x35
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9d a7       	std	Y+45, r25	; 0x2d
    1af6:	8c a7       	std	Y+44, r24	; 0x2c
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <LCD_VidInit+0x2e0>
    1afa:	88 ec       	ldi	r24, 0xC8	; 200
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9b a7       	std	Y+43, r25	; 0x2b
    1b00:	8a a7       	std	Y+42, r24	; 0x2a
    1b02:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b04:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <LCD_VidInit+0x2ce>
    1b0a:	9b a7       	std	Y+43, r25	; 0x2b
    1b0c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b10:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	9d a7       	std	Y+45, r25	; 0x2d
    1b16:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b18:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b1a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <LCD_VidInit+0x2c2>
    1b20:	24 c0       	rjmp	.+72     	; 0x1b6a <LCD_VidInit+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b24:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b26:	88 a9       	ldd	r24, Y+48	; 0x30
    1b28:	99 a9       	ldd	r25, Y+49	; 0x31
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9d a7       	std	Y+45, r25	; 0x2d
    1b34:	8c a7       	std	Y+44, r24	; 0x2c
    1b36:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b38:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b3a:	99 a7       	std	Y+41, r25	; 0x29
    1b3c:	88 a7       	std	Y+40, r24	; 0x28
    1b3e:	88 a5       	ldd	r24, Y+40	; 0x28
    1b40:	99 a5       	ldd	r25, Y+41	; 0x29
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_VidInit+0x30a>
    1b46:	99 a7       	std	Y+41, r25	; 0x29
    1b48:	88 a7       	std	Y+40, r24	; 0x28
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <LCD_VidInit+0x332>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b4c:	6f a9       	ldd	r22, Y+55	; 0x37
    1b4e:	78 ad       	ldd	r23, Y+56	; 0x38
    1b50:	89 ad       	ldd	r24, Y+57	; 0x39
    1b52:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	8e ab       	std	Y+54, r24	; 0x36
    1b5e:	8e a9       	ldd	r24, Y+54	; 0x36
    1b60:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b62:	8f a1       	ldd	r24, Y+39	; 0x27
    1b64:	8a 95       	dec	r24
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <LCD_VidInit+0x32c>
    1b68:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	/* Display ON/OFF Control Comnd */
	LCD_vidSendComnd(LCD_DisplayONControlComnd);
    1b6a:	8c e0       	ldi	r24, 0x0C	; 12
    1b6c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_vidSendComnd>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a0 e2       	ldi	r26, 0x20	; 32
    1b76:	b2 e4       	ldi	r27, 0x42	; 66
    1b78:	8b a3       	std	Y+35, r24	; 0x23
    1b7a:	9c a3       	std	Y+36, r25	; 0x24
    1b7c:	ad a3       	std	Y+37, r26	; 0x25
    1b7e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b80:	6b a1       	ldd	r22, Y+35	; 0x23
    1b82:	7c a1       	ldd	r23, Y+36	; 0x24
    1b84:	8d a1       	ldd	r24, Y+37	; 0x25
    1b86:	9e a1       	ldd	r25, Y+38	; 0x26
    1b88:	2b ea       	ldi	r18, 0xAB	; 171
    1b8a:	3a ea       	ldi	r19, 0xAA	; 170
    1b8c:	4a e2       	ldi	r20, 0x2A	; 42
    1b8e:	50 e4       	ldi	r21, 0x40	; 64
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	8f 8f       	std	Y+31, r24	; 0x1f
    1b9a:	98 a3       	std	Y+32, r25	; 0x20
    1b9c:	a9 a3       	std	Y+33, r26	; 0x21
    1b9e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ba0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ba2:	78 a1       	ldd	r23, Y+32	; 0x20
    1ba4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e8       	ldi	r20, 0x80	; 128
    1bae:	5f e3       	ldi	r21, 0x3F	; 63
    1bb0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	1c f4       	brge	.+6      	; 0x1bbe <LCD_VidInit+0x386>
		__ticks = 1;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	8e 8f       	std	Y+30, r24	; 0x1e
    1bbc:	91 c0       	rjmp	.+290    	; 0x1ce0 <LCD_VidInit+0x4a8>
	else if (__tmp > 255)
    1bbe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bc0:	78 a1       	ldd	r23, Y+32	; 0x20
    1bc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4f e7       	ldi	r20, 0x7F	; 127
    1bcc:	53 e4       	ldi	r21, 0x43	; 67
    1bce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1bd2:	18 16       	cp	r1, r24
    1bd4:	0c f0       	brlt	.+2      	; 0x1bd8 <LCD_VidInit+0x3a0>
    1bd6:	7b c0       	rjmp	.+246    	; 0x1cce <LCD_VidInit+0x496>
	{
		_delay_ms(__us / 1000.0);
    1bd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bda:	7c a1       	ldd	r23, Y+36	; 0x24
    1bdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bde:	9e a1       	ldd	r25, Y+38	; 0x26
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	4a e7       	ldi	r20, 0x7A	; 122
    1be6:	54 e4       	ldi	r21, 0x44	; 68
    1be8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8a 8f       	std	Y+26, r24	; 0x1a
    1bf2:	9b 8f       	std	Y+27, r25	; 0x1b
    1bf4:	ac 8f       	std	Y+28, r26	; 0x1c
    1bf6:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bfa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bfc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bfe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a ef       	ldi	r20, 0xFA	; 250
    1c06:	54 e4       	ldi	r21, 0x44	; 68
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	8e 8b       	std	Y+22, r24	; 0x16
    1c12:	9f 8b       	std	Y+23, r25	; 0x17
    1c14:	a8 8f       	std	Y+24, r26	; 0x18
    1c16:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c18:	6e 89       	ldd	r22, Y+22	; 0x16
    1c1a:	7f 89       	ldd	r23, Y+23	; 0x17
    1c1c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c1e:	99 8d       	ldd	r25, Y+25	; 0x19
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e8       	ldi	r20, 0x80	; 128
    1c26:	5f e3       	ldi	r21, 0x3F	; 63
    1c28:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c2c:	88 23       	and	r24, r24
    1c2e:	2c f4       	brge	.+10     	; 0x1c3a <LCD_VidInit+0x402>
		__ticks = 1;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9d 8b       	std	Y+21, r25	; 0x15
    1c36:	8c 8b       	std	Y+20, r24	; 0x14
    1c38:	3f c0       	rjmp	.+126    	; 0x1cb8 <LCD_VidInit+0x480>
	else if (__tmp > 65535)
    1c3a:	6e 89       	ldd	r22, Y+22	; 0x16
    1c3c:	7f 89       	ldd	r23, Y+23	; 0x17
    1c3e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c40:	99 8d       	ldd	r25, Y+25	; 0x19
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	3f ef       	ldi	r19, 0xFF	; 255
    1c46:	4f e7       	ldi	r20, 0x7F	; 127
    1c48:	57 e4       	ldi	r21, 0x47	; 71
    1c4a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1c4e:	18 16       	cp	r1, r24
    1c50:	4c f5       	brge	.+82     	; 0x1ca4 <LCD_VidInit+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c52:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c54:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c56:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c58:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e2       	ldi	r20, 0x20	; 32
    1c60:	51 e4       	ldi	r21, 0x41	; 65
    1c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	cd 01       	movw	r24, r26
    1c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	9d 8b       	std	Y+21, r25	; 0x15
    1c78:	8c 8b       	std	Y+20, r24	; 0x14
    1c7a:	0f c0       	rjmp	.+30     	; 0x1c9a <LCD_VidInit+0x462>
    1c7c:	88 ec       	ldi	r24, 0xC8	; 200
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	9b 8b       	std	Y+19, r25	; 0x13
    1c82:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c84:	8a 89       	ldd	r24, Y+18	; 0x12
    1c86:	9b 89       	ldd	r25, Y+19	; 0x13
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <LCD_VidInit+0x450>
    1c8c:	9b 8b       	std	Y+19, r25	; 0x13
    1c8e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c90:	8c 89       	ldd	r24, Y+20	; 0x14
    1c92:	9d 89       	ldd	r25, Y+21	; 0x15
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	9d 8b       	std	Y+21, r25	; 0x15
    1c98:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9a:	8c 89       	ldd	r24, Y+20	; 0x14
    1c9c:	9d 89       	ldd	r25, Y+21	; 0x15
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	69 f7       	brne	.-38     	; 0x1c7c <LCD_VidInit+0x444>
    1ca2:	24 c0       	rjmp	.+72     	; 0x1cec <LCD_VidInit+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca4:	6e 89       	ldd	r22, Y+22	; 0x16
    1ca6:	7f 89       	ldd	r23, Y+23	; 0x17
    1ca8:	88 8d       	ldd	r24, Y+24	; 0x18
    1caa:	99 8d       	ldd	r25, Y+25	; 0x19
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9d 8b       	std	Y+21, r25	; 0x15
    1cb6:	8c 8b       	std	Y+20, r24	; 0x14
    1cb8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cba:	9d 89       	ldd	r25, Y+21	; 0x15
    1cbc:	99 8b       	std	Y+17, r25	; 0x11
    1cbe:	88 8b       	std	Y+16, r24	; 0x10
    1cc0:	88 89       	ldd	r24, Y+16	; 0x10
    1cc2:	99 89       	ldd	r25, Y+17	; 0x11
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <LCD_VidInit+0x48c>
    1cc8:	99 8b       	std	Y+17, r25	; 0x11
    1cca:	88 8b       	std	Y+16, r24	; 0x10
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <LCD_VidInit+0x4b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cd0:	78 a1       	ldd	r23, Y+32	; 0x20
    1cd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cd4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8e 8f       	std	Y+30, r24	; 0x1e
    1ce0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ce2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce6:	8a 95       	dec	r24
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <LCD_VidInit+0x4ae>
    1cea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	/* Display Clear Comnd */
	LCD_vidSendComnd(LCD_DisplayClearComnd);
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_vidSendComnd>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e0       	ldi	r26, 0x00	; 0
    1cf8:	b0 e4       	ldi	r27, 0x40	; 64
    1cfa:	8b 87       	std	Y+11, r24	; 0x0b
    1cfc:	9c 87       	std	Y+12, r25	; 0x0c
    1cfe:	ad 87       	std	Y+13, r26	; 0x0d
    1d00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4a ef       	ldi	r20, 0xFA	; 250
    1d10:	54 e4       	ldi	r21, 0x44	; 68
    1d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8f 83       	std	Y+7, r24	; 0x07
    1d1c:	98 87       	std	Y+8, r25	; 0x08
    1d1e:	a9 87       	std	Y+9, r26	; 0x09
    1d20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d22:	6f 81       	ldd	r22, Y+7	; 0x07
    1d24:	78 85       	ldd	r23, Y+8	; 0x08
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <LCD_VidInit+0x50c>
		__ticks = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9e 83       	std	Y+6, r25	; 0x06
    1d40:	8d 83       	std	Y+5, r24	; 0x05
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <LCD_VidInit+0x58a>
	else if (__tmp > 65535)
    1d44:	6f 81       	ldd	r22, Y+7	; 0x07
    1d46:	78 85       	ldd	r23, Y+8	; 0x08
    1d48:	89 85       	ldd	r24, Y+9	; 0x09
    1d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	57 e4       	ldi	r21, 0x47	; 71
    1d54:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <LCD_VidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <LCD_VidInit+0x56c>
    1d86:	88 ec       	ldi	r24, 0xC8	; 200
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9c 83       	std	Y+4, r25	; 0x04
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_VidInit+0x55a>
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <LCD_VidInit+0x54e>
    1dac:	14 c0       	rjmp	.+40     	; 0x1dd6 <LCD_VidInit+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <LCD_VidInit+0x596>
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/* Entry Mode Set Comnd */
	LCD_vidSendComnd(LCD_EntryModeSetComnd);
    1dd6:	86 e0       	ldi	r24, 0x06	; 6
    1dd8:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_vidSendComnd>
	LCD_vidSendComnd(LCD_DisplayClearComnd);
	_delay_ms(2);
	/* Entry Mode Set Comnd */
	LCD_vidSendComnd(LCD_EntryModeSetComnd);
#endif
}
    1ddc:	c4 5b       	subi	r28, 0xB4	; 180
    1dde:	df 4f       	sbci	r29, 0xFF	; 255
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	08 95       	ret

00001df4 <LCD_vidSendComnd>:

void LCD_vidSendComnd(u8 Copy_U8Comnd){
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	69 97       	sbiw	r28, 0x19	; 25
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	89 8f       	std	Y+25, r24	; 0x19
#if LCD_MOOD_SELECITION == LCD_8_BIT_INITIZATION
	/* Rs = 0 */
	DIO_VidSetPinValue(LCD_ControlPort , LCD_RS_Pin , 0);
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
	/* Rw = 0 */
	DIO_VidSetPinValue(LCD_ControlPort , LCD_RW_Pin , 0);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	61 e0       	ldi	r22, 0x01	; 1
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
	/* Write Command */
	DIO_VidSetPortValue(LCD_DataPort , Copy_U8Comnd);
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	69 8d       	ldd	r22, Y+25	; 0x19
    1e22:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_VidSetPortValue>
	/* E = 1 */
	DIO_VidSetPinValue(LCD_ControlPort , LCD_E_Pin , 1);
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	62 e0       	ldi	r22, 0x02	; 2
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	a0 e8       	ldi	r26, 0x80	; 128
    1e36:	bf e3       	ldi	r27, 0x3F	; 63
    1e38:	8d 8b       	std	Y+21, r24	; 0x15
    1e3a:	9e 8b       	std	Y+22, r25	; 0x16
    1e3c:	af 8b       	std	Y+23, r26	; 0x17
    1e3e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e40:	6d 89       	ldd	r22, Y+21	; 0x15
    1e42:	7e 89       	ldd	r23, Y+22	; 0x16
    1e44:	8f 89       	ldd	r24, Y+23	; 0x17
    1e46:	98 8d       	ldd	r25, Y+24	; 0x18
    1e48:	2b ea       	ldi	r18, 0xAB	; 171
    1e4a:	3a ea       	ldi	r19, 0xAA	; 170
    1e4c:	4a e2       	ldi	r20, 0x2A	; 42
    1e4e:	50 e4       	ldi	r21, 0x40	; 64
    1e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	89 8b       	std	Y+17, r24	; 0x11
    1e5a:	9a 8b       	std	Y+18, r25	; 0x12
    1e5c:	ab 8b       	std	Y+19, r26	; 0x13
    1e5e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e60:	69 89       	ldd	r22, Y+17	; 0x11
    1e62:	7a 89       	ldd	r23, Y+18	; 0x12
    1e64:	8b 89       	ldd	r24, Y+19	; 0x13
    1e66:	9c 89       	ldd	r25, Y+20	; 0x14
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e8       	ldi	r20, 0x80	; 128
    1e6e:	5f e3       	ldi	r21, 0x3F	; 63
    1e70:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e74:	88 23       	and	r24, r24
    1e76:	1c f4       	brge	.+6      	; 0x1e7e <LCD_vidSendComnd+0x8a>
		__ticks = 1;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	88 8b       	std	Y+16, r24	; 0x10
    1e7c:	91 c0       	rjmp	.+290    	; 0x1fa0 <LCD_vidSendComnd+0x1ac>
	else if (__tmp > 255)
    1e7e:	69 89       	ldd	r22, Y+17	; 0x11
    1e80:	7a 89       	ldd	r23, Y+18	; 0x12
    1e82:	8b 89       	ldd	r24, Y+19	; 0x13
    1e84:	9c 89       	ldd	r25, Y+20	; 0x14
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	53 e4       	ldi	r21, 0x43	; 67
    1e8e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	0c f0       	brlt	.+2      	; 0x1e98 <LCD_vidSendComnd+0xa4>
    1e96:	7b c0       	rjmp	.+246    	; 0x1f8e <LCD_vidSendComnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1e98:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	4a e7       	ldi	r20, 0x7A	; 122
    1ea6:	54 e4       	ldi	r21, 0x44	; 68
    1ea8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	8c 87       	std	Y+12, r24	; 0x0c
    1eb2:	9d 87       	std	Y+13, r25	; 0x0d
    1eb4:	ae 87       	std	Y+14, r26	; 0x0e
    1eb6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eba:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ebc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ebe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4a ef       	ldi	r20, 0xFA	; 250
    1ec6:	54 e4       	ldi	r21, 0x44	; 68
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	88 87       	std	Y+8, r24	; 0x08
    1ed2:	99 87       	std	Y+9, r25	; 0x09
    1ed4:	aa 87       	std	Y+10, r26	; 0x0a
    1ed6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ed8:	68 85       	ldd	r22, Y+8	; 0x08
    1eda:	79 85       	ldd	r23, Y+9	; 0x09
    1edc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ede:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	2c f4       	brge	.+10     	; 0x1efa <LCD_vidSendComnd+0x106>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9f 83       	std	Y+7, r25	; 0x07
    1ef6:	8e 83       	std	Y+6, r24	; 0x06
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <LCD_vidSendComnd+0x184>
	else if (__tmp > 65535)
    1efa:	68 85       	ldd	r22, Y+8	; 0x08
    1efc:	79 85       	ldd	r23, Y+9	; 0x09
    1efe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f00:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	57 e4       	ldi	r21, 0x47	; 71
    1f0a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	4c f5       	brge	.+82     	; 0x1f64 <LCD_vidSendComnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f14:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f16:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f18:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9f 83       	std	Y+7, r25	; 0x07
    1f38:	8e 83       	std	Y+6, r24	; 0x06
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <LCD_vidSendComnd+0x166>
    1f3c:	88 ec       	ldi	r24, 0xC8	; 200
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9d 83       	std	Y+5, r25	; 0x05
    1f42:	8c 83       	std	Y+4, r24	; 0x04
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
    1f46:	9d 81       	ldd	r25, Y+5	; 0x05
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <LCD_vidSendComnd+0x154>
    1f4c:	9d 83       	std	Y+5, r25	; 0x05
    1f4e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	8e 81       	ldd	r24, Y+6	; 0x06
    1f52:	9f 81       	ldd	r25, Y+7	; 0x07
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9f 83       	std	Y+7, r25	; 0x07
    1f58:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <LCD_vidSendComnd+0x148>
    1f62:	24 c0       	rjmp	.+72     	; 0x1fac <LCD_vidSendComnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	68 85       	ldd	r22, Y+8	; 0x08
    1f66:	79 85       	ldd	r23, Y+9	; 0x09
    1f68:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9f 83       	std	Y+7, r25	; 0x07
    1f76:	8e 83       	std	Y+6, r24	; 0x06
    1f78:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f7c:	9b 83       	std	Y+3, r25	; 0x03
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	9b 81       	ldd	r25, Y+3	; 0x03
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <LCD_vidSendComnd+0x190>
    1f88:	9b 83       	std	Y+3, r25	; 0x03
    1f8a:	8a 83       	std	Y+2, r24	; 0x02
    1f8c:	0f c0       	rjmp	.+30     	; 0x1fac <LCD_vidSendComnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f8e:	69 89       	ldd	r22, Y+17	; 0x11
    1f90:	7a 89       	ldd	r23, Y+18	; 0x12
    1f92:	8b 89       	ldd	r24, Y+19	; 0x13
    1f94:	9c 89       	ldd	r25, Y+20	; 0x14
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	88 8b       	std	Y+16, r24	; 0x10
    1fa0:	88 89       	ldd	r24, Y+16	; 0x10
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	8a 95       	dec	r24
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <LCD_vidSendComnd+0x1b2>
    1faa:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/* E = 0 */
	DIO_VidSetPinValue(LCD_ControlPort , LCD_E_Pin , 0);
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	62 e0       	ldi	r22, 0x02	; 2
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_ControlPort , LCD_E_Pin , 1);
	_delay_us(1);
	/* E = 0 */
	DIO_VidSetPinValue(LCD_ControlPort , LCD_E_Pin , 0);
#endif
}
    1fb6:	69 96       	adiw	r28, 0x19	; 25
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	f8 94       	cli
    1fbc:	de bf       	out	0x3e, r29	; 62
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	cd bf       	out	0x3d, r28	; 61
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <LCD_vidSendChar>:

void LCD_vidSendChar(u8 Copy_U8Char){
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	69 97       	sbiw	r28, 0x19	; 25
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	89 8f       	std	Y+25, r24	; 0x19
#if LCD_MOOD_SELECITION == LCD_8_BIT_INITIZATION
	/* Rs = 1 */
	DIO_VidSetPinValue(LCD_ControlPort , LCD_RS_Pin , 1);
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
	/* Rw = 0 */
	DIO_VidSetPinValue(LCD_ControlPort , LCD_RW_Pin , 0);
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	61 e0       	ldi	r22, 0x01	; 1
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
	/* Write Char */
	DIO_VidSetPortValue(LCD_DataPort , Copy_U8Char);
    1ff2:	83 e0       	ldi	r24, 0x03	; 3
    1ff4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_VidSetPortValue>
	/* E = 1 */
	DIO_VidSetPinValue(LCD_ControlPort , LCD_E_Pin , 1);
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	62 e0       	ldi	r22, 0x02	; 2
    1ffe:	41 e0       	ldi	r20, 0x01	; 1
    2000:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a0 e8       	ldi	r26, 0x80	; 128
    200a:	bf e3       	ldi	r27, 0x3F	; 63
    200c:	8d 8b       	std	Y+21, r24	; 0x15
    200e:	9e 8b       	std	Y+22, r25	; 0x16
    2010:	af 8b       	std	Y+23, r26	; 0x17
    2012:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2014:	6d 89       	ldd	r22, Y+21	; 0x15
    2016:	7e 89       	ldd	r23, Y+22	; 0x16
    2018:	8f 89       	ldd	r24, Y+23	; 0x17
    201a:	98 8d       	ldd	r25, Y+24	; 0x18
    201c:	2b ea       	ldi	r18, 0xAB	; 171
    201e:	3a ea       	ldi	r19, 0xAA	; 170
    2020:	4a e2       	ldi	r20, 0x2A	; 42
    2022:	50 e4       	ldi	r21, 0x40	; 64
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	89 8b       	std	Y+17, r24	; 0x11
    202e:	9a 8b       	std	Y+18, r25	; 0x12
    2030:	ab 8b       	std	Y+19, r26	; 0x13
    2032:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2034:	69 89       	ldd	r22, Y+17	; 0x11
    2036:	7a 89       	ldd	r23, Y+18	; 0x12
    2038:	8b 89       	ldd	r24, Y+19	; 0x13
    203a:	9c 89       	ldd	r25, Y+20	; 0x14
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e8       	ldi	r20, 0x80	; 128
    2042:	5f e3       	ldi	r21, 0x3F	; 63
    2044:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2048:	88 23       	and	r24, r24
    204a:	1c f4       	brge	.+6      	; 0x2052 <LCD_vidSendChar+0x8a>
		__ticks = 1;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	88 8b       	std	Y+16, r24	; 0x10
    2050:	91 c0       	rjmp	.+290    	; 0x2174 <LCD_vidSendChar+0x1ac>
	else if (__tmp > 255)
    2052:	69 89       	ldd	r22, Y+17	; 0x11
    2054:	7a 89       	ldd	r23, Y+18	; 0x12
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	9c 89       	ldd	r25, Y+20	; 0x14
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4f e7       	ldi	r20, 0x7F	; 127
    2060:	53 e4       	ldi	r21, 0x43	; 67
    2062:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2066:	18 16       	cp	r1, r24
    2068:	0c f0       	brlt	.+2      	; 0x206c <LCD_vidSendChar+0xa4>
    206a:	7b c0       	rjmp	.+246    	; 0x2162 <LCD_vidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    206c:	6d 89       	ldd	r22, Y+21	; 0x15
    206e:	7e 89       	ldd	r23, Y+22	; 0x16
    2070:	8f 89       	ldd	r24, Y+23	; 0x17
    2072:	98 8d       	ldd	r25, Y+24	; 0x18
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	4a e7       	ldi	r20, 0x7A	; 122
    207a:	54 e4       	ldi	r21, 0x44	; 68
    207c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	8c 87       	std	Y+12, r24	; 0x0c
    2086:	9d 87       	std	Y+13, r25	; 0x0d
    2088:	ae 87       	std	Y+14, r26	; 0x0e
    208a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208c:	6c 85       	ldd	r22, Y+12	; 0x0c
    208e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2090:	8e 85       	ldd	r24, Y+14	; 0x0e
    2092:	9f 85       	ldd	r25, Y+15	; 0x0f
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a ef       	ldi	r20, 0xFA	; 250
    209a:	54 e4       	ldi	r21, 0x44	; 68
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	88 87       	std	Y+8, r24	; 0x08
    20a6:	99 87       	std	Y+9, r25	; 0x09
    20a8:	aa 87       	std	Y+10, r26	; 0x0a
    20aa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20ac:	68 85       	ldd	r22, Y+8	; 0x08
    20ae:	79 85       	ldd	r23, Y+9	; 0x09
    20b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	2c f4       	brge	.+10     	; 0x20ce <LCD_vidSendChar+0x106>
		__ticks = 1;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9f 83       	std	Y+7, r25	; 0x07
    20ca:	8e 83       	std	Y+6, r24	; 0x06
    20cc:	3f c0       	rjmp	.+126    	; 0x214c <LCD_vidSendChar+0x184>
	else if (__tmp > 65535)
    20ce:	68 85       	ldd	r22, Y+8	; 0x08
    20d0:	79 85       	ldd	r23, Y+9	; 0x09
    20d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	3f ef       	ldi	r19, 0xFF	; 255
    20da:	4f e7       	ldi	r20, 0x7F	; 127
    20dc:	57 e4       	ldi	r21, 0x47	; 71
    20de:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    20e2:	18 16       	cp	r1, r24
    20e4:	4c f5       	brge	.+82     	; 0x2138 <LCD_vidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    20e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    20ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e2       	ldi	r20, 0x20	; 32
    20f4:	51 e4       	ldi	r21, 0x41	; 65
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9f 83       	std	Y+7, r25	; 0x07
    210c:	8e 83       	std	Y+6, r24	; 0x06
    210e:	0f c0       	rjmp	.+30     	; 0x212e <LCD_vidSendChar+0x166>
    2110:	88 ec       	ldi	r24, 0xC8	; 200
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	9d 83       	std	Y+5, r25	; 0x05
    2116:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2118:	8c 81       	ldd	r24, Y+4	; 0x04
    211a:	9d 81       	ldd	r25, Y+5	; 0x05
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_vidSendChar+0x154>
    2120:	9d 83       	std	Y+5, r25	; 0x05
    2122:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2124:	8e 81       	ldd	r24, Y+6	; 0x06
    2126:	9f 81       	ldd	r25, Y+7	; 0x07
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	9f 83       	std	Y+7, r25	; 0x07
    212c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212e:	8e 81       	ldd	r24, Y+6	; 0x06
    2130:	9f 81       	ldd	r25, Y+7	; 0x07
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	69 f7       	brne	.-38     	; 0x2110 <LCD_vidSendChar+0x148>
    2136:	24 c0       	rjmp	.+72     	; 0x2180 <LCD_vidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2138:	68 85       	ldd	r22, Y+8	; 0x08
    213a:	79 85       	ldd	r23, Y+9	; 0x09
    213c:	8a 85       	ldd	r24, Y+10	; 0x0a
    213e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9f 83       	std	Y+7, r25	; 0x07
    214a:	8e 83       	std	Y+6, r24	; 0x06
    214c:	8e 81       	ldd	r24, Y+6	; 0x06
    214e:	9f 81       	ldd	r25, Y+7	; 0x07
    2150:	9b 83       	std	Y+3, r25	; 0x03
    2152:	8a 83       	std	Y+2, r24	; 0x02
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	9b 81       	ldd	r25, Y+3	; 0x03
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_vidSendChar+0x190>
    215c:	9b 83       	std	Y+3, r25	; 0x03
    215e:	8a 83       	std	Y+2, r24	; 0x02
    2160:	0f c0       	rjmp	.+30     	; 0x2180 <LCD_vidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2162:	69 89       	ldd	r22, Y+17	; 0x11
    2164:	7a 89       	ldd	r23, Y+18	; 0x12
    2166:	8b 89       	ldd	r24, Y+19	; 0x13
    2168:	9c 89       	ldd	r25, Y+20	; 0x14
    216a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	88 8b       	std	Y+16, r24	; 0x10
    2174:	88 89       	ldd	r24, Y+16	; 0x10
    2176:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	8a 95       	dec	r24
    217c:	f1 f7       	brne	.-4      	; 0x217a <LCD_vidSendChar+0x1b2>
    217e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/* E = 0 */
	DIO_VidSetPinValue(LCD_ControlPort , LCD_E_Pin , 0);
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	62 e0       	ldi	r22, 0x02	; 2
    2184:	40 e0       	ldi	r20, 0x00	; 0
    2186:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_ControlPort , LCD_E_Pin , 1);
	_delay_us(1);
	/* E = 0 */
	DIO_VidSetPinValue(LCD_ControlPort , LCD_E_Pin , 0);
#endif
}
    218a:	69 96       	adiw	r28, 0x19	; 25
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <LCD_vidWriteString>:

void LCD_vidWriteString(u8 *Copy_U8String ){
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <LCD_vidWriteString+0x6>
    21a2:	0f 92       	push	r0
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	9b 83       	std	Y+3, r25	; 0x03
    21aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Index = 0;
    21ac:	19 82       	std	Y+1, r1	; 0x01
    21ae:	0e c0       	rjmp	.+28     	; 0x21cc <LCD_vidWriteString+0x30>
	while( Copy_U8String[Local_Index] != '\0' ){
		LCD_vidSendChar(Copy_U8String[Local_Index]);
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ba:	fc 01       	movw	r30, r24
    21bc:	e2 0f       	add	r30, r18
    21be:	f3 1f       	adc	r31, r19
    21c0:	80 81       	ld	r24, Z
    21c2:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
		Local_Index++;
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	8f 5f       	subi	r24, 0xFF	; 255
    21ca:	89 83       	std	Y+1, r24	; 0x01
#endif
}

void LCD_vidWriteString(u8 *Copy_U8String ){
	u8 Local_Index = 0;
	while( Copy_U8String[Local_Index] != '\0' ){
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	fc 01       	movw	r30, r24
    21d8:	e2 0f       	add	r30, r18
    21da:	f3 1f       	adc	r31, r19
    21dc:	80 81       	ld	r24, Z
    21de:	88 23       	and	r24, r24
    21e0:	39 f7       	brne	.-50     	; 0x21b0 <LCD_vidWriteString+0x14>
		LCD_vidSendChar(Copy_U8String[Local_Index]);
		Local_Index++;
	}
}
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <LCD_vidWriteNum>:

void LCD_vidWriteNum(u32 Copy_U32Num){
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	65 97       	sbiw	r28, 0x15	; 21
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
    2206:	6a 8b       	std	Y+18, r22	; 0x12
    2208:	7b 8b       	std	Y+19, r23	; 0x13
    220a:	8c 8b       	std	Y+20, r24	; 0x14
    220c:	9d 8b       	std	Y+21, r25	; 0x15
	u8 Local_U8Arr[16];
	u8 Local_U8Index = 0;
    220e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_U32Num == 0)
    2210:	8a 89       	ldd	r24, Y+18	; 0x12
    2212:	9b 89       	ldd	r25, Y+19	; 0x13
    2214:	ac 89       	ldd	r26, Y+20	; 0x14
    2216:	bd 89       	ldd	r27, Y+21	; 0x15
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	a1 05       	cpc	r26, r1
    221c:	b1 05       	cpc	r27, r1
    221e:	89 f5       	brne	.+98     	; 0x2282 <LCD_vidWriteNum+0x94>
		LCD_vidSendChar('0');
    2220:	80 e3       	ldi	r24, 0x30	; 48
    2222:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
    2226:	2d c0       	rjmp	.+90     	; 0x2282 <LCD_vidWriteNum+0x94>

	while(Copy_U32Num != 0){
		Local_U8Index++;
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	8f 5f       	subi	r24, 0xFF	; 255
    222c:	89 83       	std	Y+1, r24	; 0x01
		Local_U8Arr[Local_U8Index] = Copy_U32Num % 10 ;
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	08 2f       	mov	r16, r24
    2232:	10 e0       	ldi	r17, 0x00	; 0
    2234:	8a 89       	ldd	r24, Y+18	; 0x12
    2236:	9b 89       	ldd	r25, Y+19	; 0x13
    2238:	ac 89       	ldd	r26, Y+20	; 0x14
    223a:	bd 89       	ldd	r27, Y+21	; 0x15
    223c:	2a e0       	ldi	r18, 0x0A	; 10
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__udivmodsi4>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	28 2f       	mov	r18, r24
    2252:	ce 01       	movw	r24, r28
    2254:	02 96       	adiw	r24, 0x02	; 2
    2256:	fc 01       	movw	r30, r24
    2258:	e0 0f       	add	r30, r16
    225a:	f1 1f       	adc	r31, r17
    225c:	20 83       	st	Z, r18
		Copy_U32Num = Copy_U32Num / 10 ;
    225e:	8a 89       	ldd	r24, Y+18	; 0x12
    2260:	9b 89       	ldd	r25, Y+19	; 0x13
    2262:	ac 89       	ldd	r26, Y+20	; 0x14
    2264:	bd 89       	ldd	r27, Y+21	; 0x15
    2266:	2a e0       	ldi	r18, 0x0A	; 10
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__udivmodsi4>
    2276:	da 01       	movw	r26, r20
    2278:	c9 01       	movw	r24, r18
    227a:	8a 8b       	std	Y+18, r24	; 0x12
    227c:	9b 8b       	std	Y+19, r25	; 0x13
    227e:	ac 8b       	std	Y+20, r26	; 0x14
    2280:	bd 8b       	std	Y+21, r27	; 0x15
	u8 Local_U8Index = 0;

	if (Copy_U32Num == 0)
		LCD_vidSendChar('0');

	while(Copy_U32Num != 0){
    2282:	8a 89       	ldd	r24, Y+18	; 0x12
    2284:	9b 89       	ldd	r25, Y+19	; 0x13
    2286:	ac 89       	ldd	r26, Y+20	; 0x14
    2288:	bd 89       	ldd	r27, Y+21	; 0x15
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	a1 05       	cpc	r26, r1
    228e:	b1 05       	cpc	r27, r1
    2290:	59 f6       	brne	.-106    	; 0x2228 <LCD_vidWriteNum+0x3a>
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <LCD_vidWriteNum+0xc4>
		Local_U8Index++;
		Local_U8Arr[Local_U8Index] = Copy_U32Num % 10 ;
		Copy_U32Num = Copy_U32Num / 10 ;
	}
	while(Local_U8Index != 0){
		LCD_vidSendChar(Local_U8Arr[Local_U8Index]+'0');
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	ce 01       	movw	r24, r28
    229c:	02 96       	adiw	r24, 0x02	; 2
    229e:	fc 01       	movw	r30, r24
    22a0:	e2 0f       	add	r30, r18
    22a2:	f3 1f       	adc	r31, r19
    22a4:	80 81       	ld	r24, Z
    22a6:	80 5d       	subi	r24, 0xD0	; 208
    22a8:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
		Local_U8Index--;
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	81 50       	subi	r24, 0x01	; 1
    22b0:	89 83       	std	Y+1, r24	; 0x01
	while(Copy_U32Num != 0){
		Local_U8Index++;
		Local_U8Arr[Local_U8Index] = Copy_U32Num % 10 ;
		Copy_U32Num = Copy_U32Num / 10 ;
	}
	while(Local_U8Index != 0){
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	88 23       	and	r24, r24
    22b6:	71 f7       	brne	.-36     	; 0x2294 <LCD_vidWriteNum+0xa6>
		LCD_vidSendChar(Local_U8Arr[Local_U8Index]+'0');
		Local_U8Index--;
	}
}
    22b8:	65 96       	adiw	r28, 0x15	; 21
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	cd bf       	out	0x3d, r28	; 61
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	1f 91       	pop	r17
    22ca:	0f 91       	pop	r16
    22cc:	08 95       	ret

000022ce <LCD_VidWriteFloatNum>:


void LCD_VidWriteFloatNum(f32 Copy_F32Num)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	62 97       	sbiw	r28, 0x12	; 18
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	6f 87       	std	Y+15, r22	; 0x0f
    22e4:	78 8b       	std	Y+16, r23	; 0x10
    22e6:	89 8b       	std	Y+17, r24	; 0x11
    22e8:	9a 8b       	std	Y+18, r25	; 0x12
	if(Copy_F32Num < 0.0 && Copy_F32Num > -1.0)
    22ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    22ec:	78 89       	ldd	r23, Y+16	; 0x10
    22ee:	89 89       	ldd	r24, Y+17	; 0x11
    22f0:	9a 89       	ldd	r25, Y+18	; 0x12
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	7c f4       	brge	.+30     	; 0x2320 <LCD_VidWriteFloatNum+0x52>
    2302:	6f 85       	ldd	r22, Y+15	; 0x0f
    2304:	78 89       	ldd	r23, Y+16	; 0x10
    2306:	89 89       	ldd	r24, Y+17	; 0x11
    2308:	9a 89       	ldd	r25, Y+18	; 0x12
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5f eb       	ldi	r21, 0xBF	; 191
    2312:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	1c f4       	brge	.+6      	; 0x2320 <LCD_VidWriteFloatNum+0x52>
	{
	  LCD_vidSendChar('-');
    231a:	8d e2       	ldi	r24, 0x2D	; 45
    231c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	 }

	 f32 LOC_U8Data = Copy_F32Num-(s32)Copy_F32Num;  /*Decimal part of the number */
    2320:	6f 85       	ldd	r22, Y+15	; 0x0f
    2322:	78 89       	ldd	r23, Y+16	; 0x10
    2324:	89 89       	ldd	r24, Y+17	; 0x11
    2326:	9a 89       	ldd	r25, Y+18	; 0x12
    2328:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2338:	9b 01       	movw	r18, r22
    233a:	ac 01       	movw	r20, r24
    233c:	6f 85       	ldd	r22, Y+15	; 0x0f
    233e:	78 89       	ldd	r23, Y+16	; 0x10
    2340:	89 89       	ldd	r24, Y+17	; 0x11
    2342:	9a 89       	ldd	r25, Y+18	; 0x12
    2344:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8b 87       	std	Y+11, r24	; 0x0b
    234e:	9c 87       	std	Y+12, r25	; 0x0c
    2350:	ad 87       	std	Y+13, r26	; 0x0d
    2352:	be 87       	std	Y+14, r27	; 0x0e
	 LCD_vidWriteNum((s32)Copy_F32Num);    /*Display real part of the number */
    2354:	6f 85       	ldd	r22, Y+15	; 0x0f
    2356:	78 89       	ldd	r23, Y+16	; 0x10
    2358:	89 89       	ldd	r24, Y+17	; 0x11
    235a:	9a 89       	ldd	r25, Y+18	; 0x12
    235c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_vidWriteNum>

	 if(LOC_U8Data == 0.0)
    236c:	6b 85       	ldd	r22, Y+11	; 0x0b
    236e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2370:	8d 85       	ldd	r24, Y+13	; 0x0d
    2372:	9e 85       	ldd	r25, Y+14	; 0x0e
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2380:	88 23       	and	r24, r24
    2382:	09 f4       	brne	.+2      	; 0x2386 <LCD_VidWriteFloatNum+0xb8>
    2384:	6d c0       	rjmp	.+218    	; 0x2460 <LCD_VidWriteFloatNum+0x192>
	 {
	  return;    /*End if Decimal part is zero*/
	 }

	 LCD_vidSendChar('.');  /* Display Decimal character*/
    2386:	8e e2       	ldi	r24, 0x2E	; 46
    2388:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	 s32 LOC_U8X=(u32)(LOC_U8Data*1000.0);  /*Accuracy up to 3 Decimal Digits */
    238c:	6b 85       	ldd	r22, Y+11	; 0x0b
    238e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2390:	8d 85       	ldd	r24, Y+13	; 0x0d
    2392:	9e 85       	ldd	r25, Y+14	; 0x0e
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	4a e7       	ldi	r20, 0x7A	; 122
    239a:	54 e4       	ldi	r21, 0x44	; 68
    239c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	8f 83       	std	Y+7, r24	; 0x07
    23b2:	98 87       	std	Y+8, r25	; 0x08
    23b4:	a9 87       	std	Y+9, r26	; 0x09
    23b6:	ba 87       	std	Y+10, r27	; 0x0a

	 if(LOC_U8X < 0)
    23b8:	8f 81       	ldd	r24, Y+7	; 0x07
    23ba:	98 85       	ldd	r25, Y+8	; 0x08
    23bc:	a9 85       	ldd	r26, Y+9	; 0x09
    23be:	ba 85       	ldd	r27, Y+10	; 0x0a
    23c0:	bb 23       	and	r27, r27
    23c2:	7c f4       	brge	.+30     	; 0x23e2 <LCD_VidWriteFloatNum+0x114>
	 {
	  LOC_U8X=~(LOC_U8X)+1;    /*2nd Complement to print positive number after decimal in case number is negative*/
    23c4:	8f 81       	ldd	r24, Y+7	; 0x07
    23c6:	98 85       	ldd	r25, Y+8	; 0x08
    23c8:	a9 85       	ldd	r26, Y+9	; 0x09
    23ca:	ba 85       	ldd	r27, Y+10	; 0x0a
    23cc:	b0 95       	com	r27
    23ce:	a0 95       	com	r26
    23d0:	90 95       	com	r25
    23d2:	81 95       	neg	r24
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	af 4f       	sbci	r26, 0xFF	; 255
    23d8:	bf 4f       	sbci	r27, 0xFF	; 255
    23da:	8f 83       	std	Y+7, r24	; 0x07
    23dc:	98 87       	std	Y+8, r25	; 0x08
    23de:	a9 87       	std	Y+9, r26	; 0x09
    23e0:	ba 87       	std	Y+10, r27	; 0x0a
	 }

	 u32 LOC_U8Y=LOC_U8X;
    23e2:	8f 81       	ldd	r24, Y+7	; 0x07
    23e4:	98 85       	ldd	r25, Y+8	; 0x08
    23e6:	a9 85       	ldd	r26, Y+9	; 0x09
    23e8:	ba 85       	ldd	r27, Y+10	; 0x0a
    23ea:	8b 83       	std	Y+3, r24	; 0x03
    23ec:	9c 83       	std	Y+4, r25	; 0x04
    23ee:	ad 83       	std	Y+5, r26	; 0x05
    23f0:	be 83       	std	Y+6, r27	; 0x06
	 u8 LOC_U8Digit=0;
    23f2:	1a 82       	std	Y+2, r1	; 0x02
    23f4:	15 c0       	rjmp	.+42     	; 0x2420 <LCD_VidWriteFloatNum+0x152>

	 while(LOC_U8X != 0)  /*Calculate Number of Digits after Decimal (if zero after '.' direct won't be calculated)*/
	 {
	  LOC_U8Digit++;
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	8f 5f       	subi	r24, 0xFF	; 255
    23fa:	8a 83       	std	Y+2, r24	; 0x02
	  LOC_U8X/=10;
    23fc:	8f 81       	ldd	r24, Y+7	; 0x07
    23fe:	98 85       	ldd	r25, Y+8	; 0x08
    2400:	a9 85       	ldd	r26, Y+9	; 0x09
    2402:	ba 85       	ldd	r27, Y+10	; 0x0a
    2404:	2a e0       	ldi	r18, 0x0A	; 10
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__divmodsi4>
    2414:	da 01       	movw	r26, r20
    2416:	c9 01       	movw	r24, r18
    2418:	8f 83       	std	Y+7, r24	; 0x07
    241a:	98 87       	std	Y+8, r25	; 0x08
    241c:	a9 87       	std	Y+9, r26	; 0x09
    241e:	ba 87       	std	Y+10, r27	; 0x0a
	 }

	 u32 LOC_U8Y=LOC_U8X;
	 u8 LOC_U8Digit=0;

	 while(LOC_U8X != 0)  /*Calculate Number of Digits after Decimal (if zero after '.' direct won't be calculated)*/
    2420:	8f 81       	ldd	r24, Y+7	; 0x07
    2422:	98 85       	ldd	r25, Y+8	; 0x08
    2424:	a9 85       	ldd	r26, Y+9	; 0x09
    2426:	ba 85       	ldd	r27, Y+10	; 0x0a
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	a1 05       	cpc	r26, r1
    242c:	b1 05       	cpc	r27, r1
    242e:	19 f7       	brne	.-58     	; 0x23f6 <LCD_VidWriteFloatNum+0x128>
	 {
	  LOC_U8Digit++;
	  LOC_U8X/=10;
	 }

	 for(u8 LOC_U8i=3;LOC_U8i>LOC_U8Digit;LOC_U8i--)  /* Display zeros after'.' direct */
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	09 c0       	rjmp	.+18     	; 0x2448 <LCD_VidWriteFloatNum+0x17a>
	 {
		 LCD_vidWriteNum(0);
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	70 e0       	ldi	r23, 0x00	; 0
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_vidWriteNum>
	 {
	  LOC_U8Digit++;
	  LOC_U8X/=10;
	 }

	 for(u8 LOC_U8i=3;LOC_U8i>LOC_U8Digit;LOC_U8i--)  /* Display zeros after'.' direct */
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	81 50       	subi	r24, 0x01	; 1
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	99 81       	ldd	r25, Y+1	; 0x01
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	89 17       	cp	r24, r25
    244e:	98 f3       	brcs	.-26     	; 0x2436 <LCD_VidWriteFloatNum+0x168>
	 {
		 LCD_vidWriteNum(0);
	 }

	 LCD_vidWriteNum(LOC_U8Y); /*Display Decimal number*/
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	9c 81       	ldd	r25, Y+4	; 0x04
    2454:	ad 81       	ldd	r26, Y+5	; 0x05
    2456:	be 81       	ldd	r27, Y+6	; 0x06
    2458:	bc 01       	movw	r22, r24
    245a:	cd 01       	movw	r24, r26
    245c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_vidWriteNum>

}
    2460:	62 96       	adiw	r28, 0x12	; 18
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <LCD_VidGoToXY>:

void LCD_VidGoToXY(u8 Copy_U8LineNum,u8 Copy_U8Location){
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	00 d0       	rcall	.+0      	; 0x2478 <LCD_VidGoToXY+0x6>
    2478:	00 d0       	rcall	.+0      	; 0x247a <LCD_VidGoToXY+0x8>
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	6a 83       	std	Y+2, r22	; 0x02
	/* Copy_U8Location <= 39 */
	if(Copy_U8Location <= 39){
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	88 32       	cpi	r24, 0x28	; 40
    2486:	c8 f4       	brcc	.+50     	; 0x24ba <LCD_VidGoToXY+0x48>
		switch(Copy_U8LineNum){
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	3c 83       	std	Y+4, r19	; 0x04
    2490:	2b 83       	std	Y+3, r18	; 0x03
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	81 30       	cpi	r24, 0x01	; 1
    2498:	91 05       	cpc	r25, r1
    249a:	31 f0       	breq	.+12     	; 0x24a8 <LCD_VidGoToXY+0x36>
    249c:	2b 81       	ldd	r18, Y+3	; 0x03
    249e:	3c 81       	ldd	r19, Y+4	; 0x04
    24a0:	22 30       	cpi	r18, 0x02	; 2
    24a2:	31 05       	cpc	r19, r1
    24a4:	31 f0       	breq	.+12     	; 0x24b2 <LCD_VidGoToXY+0x40>
    24a6:	09 c0       	rjmp	.+18     	; 0x24ba <LCD_VidGoToXY+0x48>
			case LCD_u8_Line1 : LCD_vidSendComnd(0x80+Copy_U8Location); break;
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	80 58       	subi	r24, 0x80	; 128
    24ac:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_vidSendComnd>
    24b0:	04 c0       	rjmp	.+8      	; 0x24ba <LCD_VidGoToXY+0x48>
			case LCD_u8_Line2 : LCD_vidSendComnd(0xc0+Copy_U8Location); break;
    24b2:	8a 81       	ldd	r24, Y+2	; 0x02
    24b4:	80 54       	subi	r24, 0x40	; 64
    24b6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_vidSendComnd>
		}
	}

}
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	08 95       	ret

000024c8 <LCD_VidSetCGRAMAddress>:

void LCD_VidSetCGRAMAddress(u8 Copy_U8Address){
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	69 97       	sbiw	r28, 0x19	; 25
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	89 8f       	std	Y+25, r24	; 0x19

		LCD_vidSendComnd((0b01000000) + (8*Copy_U8Address) );
    24de:	89 8d       	ldd	r24, Y+25	; 0x19
    24e0:	88 2f       	mov	r24, r24
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	08 96       	adiw	r24, 0x08	; 8
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_vidSendComnd>
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a0 e2       	ldi	r26, 0x20	; 32
    24fc:	b2 e4       	ldi	r27, 0x42	; 66
    24fe:	8d 8b       	std	Y+21, r24	; 0x15
    2500:	9e 8b       	std	Y+22, r25	; 0x16
    2502:	af 8b       	std	Y+23, r26	; 0x17
    2504:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2506:	6d 89       	ldd	r22, Y+21	; 0x15
    2508:	7e 89       	ldd	r23, Y+22	; 0x16
    250a:	8f 89       	ldd	r24, Y+23	; 0x17
    250c:	98 8d       	ldd	r25, Y+24	; 0x18
    250e:	2b ea       	ldi	r18, 0xAB	; 171
    2510:	3a ea       	ldi	r19, 0xAA	; 170
    2512:	4a e2       	ldi	r20, 0x2A	; 42
    2514:	50 e4       	ldi	r21, 0x40	; 64
    2516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	89 8b       	std	Y+17, r24	; 0x11
    2520:	9a 8b       	std	Y+18, r25	; 0x12
    2522:	ab 8b       	std	Y+19, r26	; 0x13
    2524:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2526:	69 89       	ldd	r22, Y+17	; 0x11
    2528:	7a 89       	ldd	r23, Y+18	; 0x12
    252a:	8b 89       	ldd	r24, Y+19	; 0x13
    252c:	9c 89       	ldd	r25, Y+20	; 0x14
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	1c f4       	brge	.+6      	; 0x2544 <LCD_VidSetCGRAMAddress+0x7c>
		__ticks = 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	88 8b       	std	Y+16, r24	; 0x10
    2542:	91 c0       	rjmp	.+290    	; 0x2666 <LCD_VidSetCGRAMAddress+0x19e>
	else if (__tmp > 255)
    2544:	69 89       	ldd	r22, Y+17	; 0x11
    2546:	7a 89       	ldd	r23, Y+18	; 0x12
    2548:	8b 89       	ldd	r24, Y+19	; 0x13
    254a:	9c 89       	ldd	r25, Y+20	; 0x14
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	4f e7       	ldi	r20, 0x7F	; 127
    2552:	53 e4       	ldi	r21, 0x43	; 67
    2554:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2558:	18 16       	cp	r1, r24
    255a:	0c f0       	brlt	.+2      	; 0x255e <LCD_VidSetCGRAMAddress+0x96>
    255c:	7b c0       	rjmp	.+246    	; 0x2654 <LCD_VidSetCGRAMAddress+0x18c>
	{
		_delay_ms(__us / 1000.0);
    255e:	6d 89       	ldd	r22, Y+21	; 0x15
    2560:	7e 89       	ldd	r23, Y+22	; 0x16
    2562:	8f 89       	ldd	r24, Y+23	; 0x17
    2564:	98 8d       	ldd	r25, Y+24	; 0x18
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	4a e7       	ldi	r20, 0x7A	; 122
    256c:	54 e4       	ldi	r21, 0x44	; 68
    256e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	8c 87       	std	Y+12, r24	; 0x0c
    2578:	9d 87       	std	Y+13, r25	; 0x0d
    257a:	ae 87       	std	Y+14, r26	; 0x0e
    257c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2580:	7d 85       	ldd	r23, Y+13	; 0x0d
    2582:	8e 85       	ldd	r24, Y+14	; 0x0e
    2584:	9f 85       	ldd	r25, Y+15	; 0x0f
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	4a ef       	ldi	r20, 0xFA	; 250
    258c:	54 e4       	ldi	r21, 0x44	; 68
    258e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	88 87       	std	Y+8, r24	; 0x08
    2598:	99 87       	std	Y+9, r25	; 0x09
    259a:	aa 87       	std	Y+10, r26	; 0x0a
    259c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    259e:	68 85       	ldd	r22, Y+8	; 0x08
    25a0:	79 85       	ldd	r23, Y+9	; 0x09
    25a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e8       	ldi	r20, 0x80	; 128
    25ac:	5f e3       	ldi	r21, 0x3F	; 63
    25ae:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    25b2:	88 23       	and	r24, r24
    25b4:	2c f4       	brge	.+10     	; 0x25c0 <LCD_VidSetCGRAMAddress+0xf8>
		__ticks = 1;
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	9f 83       	std	Y+7, r25	; 0x07
    25bc:	8e 83       	std	Y+6, r24	; 0x06
    25be:	3f c0       	rjmp	.+126    	; 0x263e <LCD_VidSetCGRAMAddress+0x176>
	else if (__tmp > 65535)
    25c0:	68 85       	ldd	r22, Y+8	; 0x08
    25c2:	79 85       	ldd	r23, Y+9	; 0x09
    25c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	3f ef       	ldi	r19, 0xFF	; 255
    25cc:	4f e7       	ldi	r20, 0x7F	; 127
    25ce:	57 e4       	ldi	r21, 0x47	; 71
    25d0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    25d4:	18 16       	cp	r1, r24
    25d6:	4c f5       	brge	.+82     	; 0x262a <LCD_VidSetCGRAMAddress+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    25da:	7d 85       	ldd	r23, Y+13	; 0x0d
    25dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    25de:	9f 85       	ldd	r25, Y+15	; 0x0f
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e2       	ldi	r20, 0x20	; 32
    25e6:	51 e4       	ldi	r21, 0x41	; 65
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9f 83       	std	Y+7, r25	; 0x07
    25fe:	8e 83       	std	Y+6, r24	; 0x06
    2600:	0f c0       	rjmp	.+30     	; 0x2620 <LCD_VidSetCGRAMAddress+0x158>
    2602:	88 ec       	ldi	r24, 0xC8	; 200
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9d 83       	std	Y+5, r25	; 0x05
    2608:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    260a:	8c 81       	ldd	r24, Y+4	; 0x04
    260c:	9d 81       	ldd	r25, Y+5	; 0x05
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <LCD_VidSetCGRAMAddress+0x146>
    2612:	9d 83       	std	Y+5, r25	; 0x05
    2614:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2616:	8e 81       	ldd	r24, Y+6	; 0x06
    2618:	9f 81       	ldd	r25, Y+7	; 0x07
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	9f 83       	std	Y+7, r25	; 0x07
    261e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2620:	8e 81       	ldd	r24, Y+6	; 0x06
    2622:	9f 81       	ldd	r25, Y+7	; 0x07
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	69 f7       	brne	.-38     	; 0x2602 <LCD_VidSetCGRAMAddress+0x13a>
    2628:	24 c0       	rjmp	.+72     	; 0x2672 <LCD_VidSetCGRAMAddress+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262a:	68 85       	ldd	r22, Y+8	; 0x08
    262c:	79 85       	ldd	r23, Y+9	; 0x09
    262e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2630:	9b 85       	ldd	r25, Y+11	; 0x0b
    2632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	9f 83       	std	Y+7, r25	; 0x07
    263c:	8e 83       	std	Y+6, r24	; 0x06
    263e:	8e 81       	ldd	r24, Y+6	; 0x06
    2640:	9f 81       	ldd	r25, Y+7	; 0x07
    2642:	9b 83       	std	Y+3, r25	; 0x03
    2644:	8a 83       	std	Y+2, r24	; 0x02
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	9b 81       	ldd	r25, Y+3	; 0x03
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <LCD_VidSetCGRAMAddress+0x182>
    264e:	9b 83       	std	Y+3, r25	; 0x03
    2650:	8a 83       	std	Y+2, r24	; 0x02
    2652:	0f c0       	rjmp	.+30     	; 0x2672 <LCD_VidSetCGRAMAddress+0x1aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2654:	69 89       	ldd	r22, Y+17	; 0x11
    2656:	7a 89       	ldd	r23, Y+18	; 0x12
    2658:	8b 89       	ldd	r24, Y+19	; 0x13
    265a:	9c 89       	ldd	r25, Y+20	; 0x14
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	88 8b       	std	Y+16, r24	; 0x10
    2666:	88 89       	ldd	r24, Y+16	; 0x10
    2668:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	8a 95       	dec	r24
    266e:	f1 f7       	brne	.-4      	; 0x266c <LCD_VidSetCGRAMAddress+0x1a4>
    2670:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(40);

}
    2672:	69 96       	adiw	r28, 0x19	; 25
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <LCD_VidDrawChar>:

void LCD_VidDrawChar(u8 Copy_U8Char1 , u8 Copy_U8Char2 , u8 Copy_U8Char3 , u8 Copy_U8Char4 , u8 Copy_U8Char5 , u8 Copy_U8Char6 , u8 Copy_U8Char7 , u8 Copy_U8Char8 ){
    2684:	af 92       	push	r10
    2686:	cf 92       	push	r12
    2688:	ef 92       	push	r14
    268a:	0f 93       	push	r16
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	28 97       	sbiw	r28, 0x08	; 8
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	89 83       	std	Y+1, r24	; 0x01
    26a2:	6a 83       	std	Y+2, r22	; 0x02
    26a4:	4b 83       	std	Y+3, r20	; 0x03
    26a6:	2c 83       	std	Y+4, r18	; 0x04
    26a8:	0d 83       	std	Y+5, r16	; 0x05
    26aa:	ee 82       	std	Y+6, r14	; 0x06
    26ac:	cf 82       	std	Y+7, r12	; 0x07
    26ae:	a8 86       	std	Y+8, r10	; 0x08
	LCD_vidSendChar(Copy_U8Char1);
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Char2);
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Char3);
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Char4);
    26c2:	8c 81       	ldd	r24, Y+4	; 0x04
    26c4:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Char5);
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Char6);
    26ce:	8e 81       	ldd	r24, Y+6	; 0x06
    26d0:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Char7);
    26d4:	8f 81       	ldd	r24, Y+7	; 0x07
    26d6:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Char8);
    26da:	88 85       	ldd	r24, Y+8	; 0x08
    26dc:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>

}
    26e0:	28 96       	adiw	r28, 0x08	; 8
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	0f 91       	pop	r16
    26f2:	ef 90       	pop	r14
    26f4:	cf 90       	pop	r12
    26f6:	af 90       	pop	r10
    26f8:	08 95       	ret

000026fa <LCD_VidWriteShiftChar>:

void LCD_VidWriteShiftChar(u8 Copy_U8Address , u8 Copy_U8LineNum , u8 Copy_U8Location){
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <LCD_VidWriteShiftChar+0x6>
    2700:	0f 92       	push	r0
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	89 83       	std	Y+1, r24	; 0x01
    2708:	6a 83       	std	Y+2, r22	; 0x02
    270a:	4b 83       	std	Y+3, r20	; 0x03

	LCD_VidGoToXY(Copy_U8LineNum,Copy_U8Location);
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	6b 81       	ldd	r22, Y+3	; 0x03
    2710:	0e 94 39 12 	call	0x2472	; 0x2472 <LCD_VidGoToXY>
	LCD_vidSendChar(Copy_U8Address);
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
}
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <LCD_VidDrawCharByArray>:

void LCD_VidDrawCharByArray(u8 *Copy_U8Arr){
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	00 d0       	rcall	.+0      	; 0x272c <LCD_VidDrawCharByArray+0x6>
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendChar(Copy_U8Arr[0]);
    2734:	e9 81       	ldd	r30, Y+1	; 0x01
    2736:	fa 81       	ldd	r31, Y+2	; 0x02
    2738:	80 81       	ld	r24, Z
    273a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Arr[1]);
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	9a 81       	ldd	r25, Y+2	; 0x02
    2742:	fc 01       	movw	r30, r24
    2744:	31 96       	adiw	r30, 0x01	; 1
    2746:	80 81       	ld	r24, Z
    2748:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Arr[2]);
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	9a 81       	ldd	r25, Y+2	; 0x02
    2750:	fc 01       	movw	r30, r24
    2752:	32 96       	adiw	r30, 0x02	; 2
    2754:	80 81       	ld	r24, Z
    2756:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Arr[3]);
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	9a 81       	ldd	r25, Y+2	; 0x02
    275e:	fc 01       	movw	r30, r24
    2760:	33 96       	adiw	r30, 0x03	; 3
    2762:	80 81       	ld	r24, Z
    2764:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Arr[4]);
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	9a 81       	ldd	r25, Y+2	; 0x02
    276c:	fc 01       	movw	r30, r24
    276e:	34 96       	adiw	r30, 0x04	; 4
    2770:	80 81       	ld	r24, Z
    2772:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Arr[5]);
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	fc 01       	movw	r30, r24
    277c:	35 96       	adiw	r30, 0x05	; 5
    277e:	80 81       	ld	r24, Z
    2780:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Arr[6]);
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	fc 01       	movw	r30, r24
    278a:	36 96       	adiw	r30, 0x06	; 6
    278c:	80 81       	ld	r24, Z
    278e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
	LCD_vidSendChar(Copy_U8Arr[7]);
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	9a 81       	ldd	r25, Y+2	; 0x02
    2796:	fc 01       	movw	r30, r24
    2798:	37 96       	adiw	r30, 0x07	; 7
    279a:	80 81       	ld	r24, Z
    279c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <LCD_VidDisplayClear>:

void LCD_VidDisplayClear(void){
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	2e 97       	sbiw	r28, 0x0e	; 14
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
	LCD_vidSendComnd(LCD_DisplayClearComnd);
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <LCD_vidSendComnd>
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a0 e0       	ldi	r26, 0x00	; 0
    27ca:	b0 e4       	ldi	r27, 0x40	; 64
    27cc:	8b 87       	std	Y+11, r24	; 0x0b
    27ce:	9c 87       	std	Y+12, r25	; 0x0c
    27d0:	ad 87       	std	Y+13, r26	; 0x0d
    27d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27da:	9e 85       	ldd	r25, Y+14	; 0x0e
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	4a ef       	ldi	r20, 0xFA	; 250
    27e2:	54 e4       	ldi	r21, 0x44	; 68
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	8f 83       	std	Y+7, r24	; 0x07
    27ee:	98 87       	std	Y+8, r25	; 0x08
    27f0:	a9 87       	std	Y+9, r26	; 0x09
    27f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27f4:	6f 81       	ldd	r22, Y+7	; 0x07
    27f6:	78 85       	ldd	r23, Y+8	; 0x08
    27f8:	89 85       	ldd	r24, Y+9	; 0x09
    27fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e8       	ldi	r20, 0x80	; 128
    2802:	5f e3       	ldi	r21, 0x3F	; 63
    2804:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2808:	88 23       	and	r24, r24
    280a:	2c f4       	brge	.+10     	; 0x2816 <LCD_VidDisplayClear+0x6c>
		__ticks = 1;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
    2814:	3f c0       	rjmp	.+126    	; 0x2894 <LCD_VidDisplayClear+0xea>
	else if (__tmp > 65535)
    2816:	6f 81       	ldd	r22, Y+7	; 0x07
    2818:	78 85       	ldd	r23, Y+8	; 0x08
    281a:	89 85       	ldd	r24, Y+9	; 0x09
    281c:	9a 85       	ldd	r25, Y+10	; 0x0a
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	3f ef       	ldi	r19, 0xFF	; 255
    2822:	4f e7       	ldi	r20, 0x7F	; 127
    2824:	57 e4       	ldi	r21, 0x47	; 71
    2826:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    282a:	18 16       	cp	r1, r24
    282c:	4c f5       	brge	.+82     	; 0x2880 <LCD_VidDisplayClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2830:	7c 85       	ldd	r23, Y+12	; 0x0c
    2832:	8d 85       	ldd	r24, Y+13	; 0x0d
    2834:	9e 85       	ldd	r25, Y+14	; 0x0e
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e2       	ldi	r20, 0x20	; 32
    283c:	51 e4       	ldi	r21, 0x41	; 65
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
    2856:	0f c0       	rjmp	.+30     	; 0x2876 <LCD_VidDisplayClear+0xcc>
    2858:	88 ec       	ldi	r24, 0xC8	; 200
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	9c 83       	std	Y+4, r25	; 0x04
    285e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <LCD_VidDisplayClear+0xba>
    2868:	9c 83       	std	Y+4, r25	; 0x04
    286a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286c:	8d 81       	ldd	r24, Y+5	; 0x05
    286e:	9e 81       	ldd	r25, Y+6	; 0x06
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	9e 83       	std	Y+6, r25	; 0x06
    2874:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2876:	8d 81       	ldd	r24, Y+5	; 0x05
    2878:	9e 81       	ldd	r25, Y+6	; 0x06
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	69 f7       	brne	.-38     	; 0x2858 <LCD_VidDisplayClear+0xae>
    287e:	14 c0       	rjmp	.+40     	; 0x28a8 <LCD_VidDisplayClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2880:	6f 81       	ldd	r22, Y+7	; 0x07
    2882:	78 85       	ldd	r23, Y+8	; 0x08
    2884:	89 85       	ldd	r24, Y+9	; 0x09
    2886:	9a 85       	ldd	r25, Y+10	; 0x0a
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	9e 83       	std	Y+6, r25	; 0x06
    2892:	8d 83       	std	Y+5, r24	; 0x05
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
    2896:	9e 81       	ldd	r25, Y+6	; 0x06
    2898:	9a 83       	std	Y+2, r25	; 0x02
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <LCD_VidDisplayClear+0xf6>
    28a4:	9a 83       	std	Y+2, r25	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    28a8:	2e 96       	adiw	r28, 0x0e	; 14
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	08 95       	ret

000028ba <main>:
u8 Stat_Flag = 0;

f32 Ruselt;
u8 Ruselt_Flag = 0;

int main(void){
    28ba:	0f 93       	push	r16
    28bc:	1f 93       	push	r17
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	c7 55       	subi	r28, 0x57	; 87
    28c8:	d0 40       	sbci	r29, 0x00	; 0
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61

	LCD_VidInit();
    28d4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LCD_VidInit>
	KPD_VidInitc();
    28d8:	0e 94 1d 0b 	call	0x163a	; 0x163a <KPD_VidInitc>
    28dc:	fe 01       	movw	r30, r28
    28de:	ef 5a       	subi	r30, 0xAF	; 175
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	90 e8       	ldi	r25, 0x80	; 128
    28e6:	ab e3       	ldi	r26, 0x3B	; 59
    28e8:	b5 e4       	ldi	r27, 0x45	; 69
    28ea:	80 83       	st	Z, r24
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	a2 83       	std	Z+2, r26	; 0x02
    28f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f2:	8e 01       	movw	r16, r28
    28f4:	03 5b       	subi	r16, 0xB3	; 179
    28f6:	1f 4f       	sbci	r17, 0xFF	; 255
    28f8:	fe 01       	movw	r30, r28
    28fa:	ef 5a       	subi	r30, 0xAF	; 175
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	60 81       	ld	r22, Z
    2900:	71 81       	ldd	r23, Z+1	; 0x01
    2902:	82 81       	ldd	r24, Z+2	; 0x02
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	4a ef       	ldi	r20, 0xFA	; 250
    290c:	54 e4       	ldi	r21, 0x44	; 68
    290e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	f8 01       	movw	r30, r16
    2918:	80 83       	st	Z, r24
    291a:	91 83       	std	Z+1, r25	; 0x01
    291c:	a2 83       	std	Z+2, r26	; 0x02
    291e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2920:	fe 01       	movw	r30, r28
    2922:	e3 5b       	subi	r30, 0xB3	; 179
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	60 81       	ld	r22, Z
    2928:	71 81       	ldd	r23, Z+1	; 0x01
    292a:	82 81       	ldd	r24, Z+2	; 0x02
    292c:	93 81       	ldd	r25, Z+3	; 0x03
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e8       	ldi	r20, 0x80	; 128
    2934:	5f e3       	ldi	r21, 0x3F	; 63
    2936:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    293a:	88 23       	and	r24, r24
    293c:	44 f4       	brge	.+16     	; 0x294e <main+0x94>
		__ticks = 1;
    293e:	fe 01       	movw	r30, r28
    2940:	e5 5b       	subi	r30, 0xB5	; 181
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	91 83       	std	Z+1, r25	; 0x01
    294a:	80 83       	st	Z, r24
    294c:	64 c0       	rjmp	.+200    	; 0x2a16 <main+0x15c>
	else if (__tmp > 65535)
    294e:	fe 01       	movw	r30, r28
    2950:	e3 5b       	subi	r30, 0xB3	; 179
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	60 81       	ld	r22, Z
    2956:	71 81       	ldd	r23, Z+1	; 0x01
    2958:	82 81       	ldd	r24, Z+2	; 0x02
    295a:	93 81       	ldd	r25, Z+3	; 0x03
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	3f ef       	ldi	r19, 0xFF	; 255
    2960:	4f e7       	ldi	r20, 0x7F	; 127
    2962:	57 e4       	ldi	r21, 0x47	; 71
    2964:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2968:	18 16       	cp	r1, r24
    296a:	0c f0       	brlt	.+2      	; 0x296e <main+0xb4>
    296c:	43 c0       	rjmp	.+134    	; 0x29f4 <main+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296e:	fe 01       	movw	r30, r28
    2970:	ef 5a       	subi	r30, 0xAF	; 175
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	60 81       	ld	r22, Z
    2976:	71 81       	ldd	r23, Z+1	; 0x01
    2978:	82 81       	ldd	r24, Z+2	; 0x02
    297a:	93 81       	ldd	r25, Z+3	; 0x03
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e2       	ldi	r20, 0x20	; 32
    2982:	51 e4       	ldi	r21, 0x41	; 65
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	8e 01       	movw	r16, r28
    298e:	05 5b       	subi	r16, 0xB5	; 181
    2990:	1f 4f       	sbci	r17, 0xFF	; 255
    2992:	bc 01       	movw	r22, r24
    2994:	cd 01       	movw	r24, r26
    2996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	f8 01       	movw	r30, r16
    29a0:	91 83       	std	Z+1, r25	; 0x01
    29a2:	80 83       	st	Z, r24
    29a4:	1f c0       	rjmp	.+62     	; 0x29e4 <main+0x12a>
    29a6:	fe 01       	movw	r30, r28
    29a8:	e7 5b       	subi	r30, 0xB7	; 183
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	88 ec       	ldi	r24, 0xC8	; 200
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	80 83       	st	Z, r24
    29b4:	fe 01       	movw	r30, r28
    29b6:	e7 5b       	subi	r30, 0xB7	; 183
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	80 81       	ld	r24, Z
    29bc:	91 81       	ldd	r25, Z+1	; 0x01
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <main+0x104>
    29c2:	fe 01       	movw	r30, r28
    29c4:	e7 5b       	subi	r30, 0xB7	; 183
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29cc:	de 01       	movw	r26, r28
    29ce:	a5 5b       	subi	r26, 0xB5	; 181
    29d0:	bf 4f       	sbci	r27, 0xFF	; 255
    29d2:	fe 01       	movw	r30, r28
    29d4:	e5 5b       	subi	r30, 0xB5	; 181
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	80 81       	ld	r24, Z
    29da:	91 81       	ldd	r25, Z+1	; 0x01
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	11 96       	adiw	r26, 0x01	; 1
    29e0:	9c 93       	st	X, r25
    29e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e4:	fe 01       	movw	r30, r28
    29e6:	e5 5b       	subi	r30, 0xB5	; 181
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 81       	ld	r24, Z
    29ec:	91 81       	ldd	r25, Z+1	; 0x01
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	d1 f6       	brne	.-76     	; 0x29a6 <main+0xec>
    29f2:	27 c0       	rjmp	.+78     	; 0x2a42 <main+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f4:	8e 01       	movw	r16, r28
    29f6:	05 5b       	subi	r16, 0xB5	; 181
    29f8:	1f 4f       	sbci	r17, 0xFF	; 255
    29fa:	fe 01       	movw	r30, r28
    29fc:	e3 5b       	subi	r30, 0xB3	; 179
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	60 81       	ld	r22, Z
    2a02:	71 81       	ldd	r23, Z+1	; 0x01
    2a04:	82 81       	ldd	r24, Z+2	; 0x02
    2a06:	93 81       	ldd	r25, Z+3	; 0x03
    2a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	f8 01       	movw	r30, r16
    2a12:	91 83       	std	Z+1, r25	; 0x01
    2a14:	80 83       	st	Z, r24
    2a16:	de 01       	movw	r26, r28
    2a18:	a9 5b       	subi	r26, 0xB9	; 185
    2a1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e5 5b       	subi	r30, 0xB5	; 181
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	80 81       	ld	r24, Z
    2a24:	91 81       	ldd	r25, Z+1	; 0x01
    2a26:	8d 93       	st	X+, r24
    2a28:	9c 93       	st	X, r25
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e9 5b       	subi	r30, 0xB9	; 185
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	80 81       	ld	r24, Z
    2a32:	91 81       	ldd	r25, Z+1	; 0x01
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <main+0x17a>
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e9 5b       	subi	r30, 0xB9	; 185
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	80 83       	st	Z, r24

	u8 num;
	//u32 Arr_Calc[9];

	_delay_ms(3000);
	LCD_vidWriteString("Loading.");
    2a42:	80 e6       	ldi	r24, 0x60	; 96
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_vidWriteString>
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	ed 5b       	subi	r30, 0xBD	; 189
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	aa e7       	ldi	r26, 0x7A	; 122
    2a56:	b3 e4       	ldi	r27, 0x43	; 67
    2a58:	80 83       	st	Z, r24
    2a5a:	91 83       	std	Z+1, r25	; 0x01
    2a5c:	a2 83       	std	Z+2, r26	; 0x02
    2a5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a60:	8e 01       	movw	r16, r28
    2a62:	01 5c       	subi	r16, 0xC1	; 193
    2a64:	1f 4f       	sbci	r17, 0xFF	; 255
    2a66:	fe 01       	movw	r30, r28
    2a68:	ed 5b       	subi	r30, 0xBD	; 189
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	60 81       	ld	r22, Z
    2a6e:	71 81       	ldd	r23, Z+1	; 0x01
    2a70:	82 81       	ldd	r24, Z+2	; 0x02
    2a72:	93 81       	ldd	r25, Z+3	; 0x03
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	4a ef       	ldi	r20, 0xFA	; 250
    2a7a:	54 e4       	ldi	r21, 0x44	; 68
    2a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	f8 01       	movw	r30, r16
    2a86:	80 83       	st	Z, r24
    2a88:	91 83       	std	Z+1, r25	; 0x01
    2a8a:	a2 83       	std	Z+2, r26	; 0x02
    2a8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ff 96       	adiw	r30, 0x3f	; 63
    2a92:	60 81       	ld	r22, Z
    2a94:	71 81       	ldd	r23, Z+1	; 0x01
    2a96:	82 81       	ldd	r24, Z+2	; 0x02
    2a98:	93 81       	ldd	r25, Z+3	; 0x03
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e8       	ldi	r20, 0x80	; 128
    2aa0:	5f e3       	ldi	r21, 0x3F	; 63
    2aa2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2aa6:	88 23       	and	r24, r24
    2aa8:	2c f4       	brge	.+10     	; 0x2ab4 <main+0x1fa>
		__ticks = 1;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	9e af       	std	Y+62, r25	; 0x3e
    2ab0:	8d af       	std	Y+61, r24	; 0x3d
    2ab2:	46 c0       	rjmp	.+140    	; 0x2b40 <main+0x286>
	else if (__tmp > 65535)
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	ff 96       	adiw	r30, 0x3f	; 63
    2ab8:	60 81       	ld	r22, Z
    2aba:	71 81       	ldd	r23, Z+1	; 0x01
    2abc:	82 81       	ldd	r24, Z+2	; 0x02
    2abe:	93 81       	ldd	r25, Z+3	; 0x03
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	3f ef       	ldi	r19, 0xFF	; 255
    2ac4:	4f e7       	ldi	r20, 0x7F	; 127
    2ac6:	57 e4       	ldi	r21, 0x47	; 71
    2ac8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2acc:	18 16       	cp	r1, r24
    2ace:	64 f5       	brge	.+88     	; 0x2b28 <main+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	ed 5b       	subi	r30, 0xBD	; 189
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	60 81       	ld	r22, Z
    2ad8:	71 81       	ldd	r23, Z+1	; 0x01
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	93 81       	ldd	r25, Z+3	; 0x03
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e2       	ldi	r20, 0x20	; 32
    2ae4:	51 e4       	ldi	r21, 0x41	; 65
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	9e af       	std	Y+62, r25	; 0x3e
    2afc:	8d af       	std	Y+61, r24	; 0x3d
    2afe:	0f c0       	rjmp	.+30     	; 0x2b1e <main+0x264>
    2b00:	88 ec       	ldi	r24, 0xC8	; 200
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	9c af       	std	Y+60, r25	; 0x3c
    2b06:	8b af       	std	Y+59, r24	; 0x3b
    2b08:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b0a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <main+0x252>
    2b10:	9c af       	std	Y+60, r25	; 0x3c
    2b12:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b14:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b16:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	9e af       	std	Y+62, r25	; 0x3e
    2b1c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b20:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	69 f7       	brne	.-38     	; 0x2b00 <main+0x246>
    2b26:	16 c0       	rjmp	.+44     	; 0x2b54 <main+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b28:	fe 01       	movw	r30, r28
    2b2a:	ff 96       	adiw	r30, 0x3f	; 63
    2b2c:	60 81       	ld	r22, Z
    2b2e:	71 81       	ldd	r23, Z+1	; 0x01
    2b30:	82 81       	ldd	r24, Z+2	; 0x02
    2b32:	93 81       	ldd	r25, Z+3	; 0x03
    2b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	9e af       	std	Y+62, r25	; 0x3e
    2b3e:	8d af       	std	Y+61, r24	; 0x3d
    2b40:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b42:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b44:	9a af       	std	Y+58, r25	; 0x3a
    2b46:	89 af       	std	Y+57, r24	; 0x39
    2b48:	89 ad       	ldd	r24, Y+57	; 0x39
    2b4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <main+0x292>
    2b50:	9a af       	std	Y+58, r25	; 0x3a
    2b52:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(250);
	LCD_vidSendChar('.');
    2b54:	8e e2       	ldi	r24, 0x2E	; 46
    2b56:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	aa e7       	ldi	r26, 0x7A	; 122
    2b60:	b3 e4       	ldi	r27, 0x43	; 67
    2b62:	8d ab       	std	Y+53, r24	; 0x35
    2b64:	9e ab       	std	Y+54, r25	; 0x36
    2b66:	af ab       	std	Y+55, r26	; 0x37
    2b68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6a:	6d a9       	ldd	r22, Y+53	; 0x35
    2b6c:	7e a9       	ldd	r23, Y+54	; 0x36
    2b6e:	8f a9       	ldd	r24, Y+55	; 0x37
    2b70:	98 ad       	ldd	r25, Y+56	; 0x38
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	4a ef       	ldi	r20, 0xFA	; 250
    2b78:	54 e4       	ldi	r21, 0x44	; 68
    2b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	89 ab       	std	Y+49, r24	; 0x31
    2b84:	9a ab       	std	Y+50, r25	; 0x32
    2b86:	ab ab       	std	Y+51, r26	; 0x33
    2b88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b90:	9c a9       	ldd	r25, Y+52	; 0x34
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e8       	ldi	r20, 0x80	; 128
    2b98:	5f e3       	ldi	r21, 0x3F	; 63
    2b9a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b9e:	88 23       	and	r24, r24
    2ba0:	2c f4       	brge	.+10     	; 0x2bac <main+0x2f2>
		__ticks = 1;
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	98 ab       	std	Y+48, r25	; 0x30
    2ba8:	8f a7       	std	Y+47, r24	; 0x2f
    2baa:	3f c0       	rjmp	.+126    	; 0x2c2a <main+0x370>
	else if (__tmp > 65535)
    2bac:	69 a9       	ldd	r22, Y+49	; 0x31
    2bae:	7a a9       	ldd	r23, Y+50	; 0x32
    2bb0:	8b a9       	ldd	r24, Y+51	; 0x33
    2bb2:	9c a9       	ldd	r25, Y+52	; 0x34
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	3f ef       	ldi	r19, 0xFF	; 255
    2bb8:	4f e7       	ldi	r20, 0x7F	; 127
    2bba:	57 e4       	ldi	r21, 0x47	; 71
    2bbc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2bc0:	18 16       	cp	r1, r24
    2bc2:	4c f5       	brge	.+82     	; 0x2c16 <main+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc4:	6d a9       	ldd	r22, Y+53	; 0x35
    2bc6:	7e a9       	ldd	r23, Y+54	; 0x36
    2bc8:	8f a9       	ldd	r24, Y+55	; 0x37
    2bca:	98 ad       	ldd	r25, Y+56	; 0x38
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e2       	ldi	r20, 0x20	; 32
    2bd2:	51 e4       	ldi	r21, 0x41	; 65
    2bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	bc 01       	movw	r22, r24
    2bde:	cd 01       	movw	r24, r26
    2be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	98 ab       	std	Y+48, r25	; 0x30
    2bea:	8f a7       	std	Y+47, r24	; 0x2f
    2bec:	0f c0       	rjmp	.+30     	; 0x2c0c <main+0x352>
    2bee:	88 ec       	ldi	r24, 0xC8	; 200
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	9e a7       	std	Y+46, r25	; 0x2e
    2bf4:	8d a7       	std	Y+45, r24	; 0x2d
    2bf6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bf8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	f1 f7       	brne	.-4      	; 0x2bfa <main+0x340>
    2bfe:	9e a7       	std	Y+46, r25	; 0x2e
    2c00:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c02:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c04:	98 a9       	ldd	r25, Y+48	; 0x30
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	98 ab       	std	Y+48, r25	; 0x30
    2c0a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c0e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c10:	00 97       	sbiw	r24, 0x00	; 0
    2c12:	69 f7       	brne	.-38     	; 0x2bee <main+0x334>
    2c14:	14 c0       	rjmp	.+40     	; 0x2c3e <main+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c16:	69 a9       	ldd	r22, Y+49	; 0x31
    2c18:	7a a9       	ldd	r23, Y+50	; 0x32
    2c1a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c1c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	98 ab       	std	Y+48, r25	; 0x30
    2c28:	8f a7       	std	Y+47, r24	; 0x2f
    2c2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c2e:	9c a7       	std	Y+44, r25	; 0x2c
    2c30:	8b a7       	std	Y+43, r24	; 0x2b
    2c32:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c34:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <main+0x37c>
    2c3a:	9c a7       	std	Y+44, r25	; 0x2c
    2c3c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(250);
	LCD_vidSendChar('.');
    2c3e:	8e e2       	ldi	r24, 0x2E	; 46
    2c40:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	aa e7       	ldi	r26, 0x7A	; 122
    2c4a:	b3 e4       	ldi	r27, 0x43	; 67
    2c4c:	8f a3       	std	Y+39, r24	; 0x27
    2c4e:	98 a7       	std	Y+40, r25	; 0x28
    2c50:	a9 a7       	std	Y+41, r26	; 0x29
    2c52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c54:	6f a1       	ldd	r22, Y+39	; 0x27
    2c56:	78 a5       	ldd	r23, Y+40	; 0x28
    2c58:	89 a5       	ldd	r24, Y+41	; 0x29
    2c5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	4a ef       	ldi	r20, 0xFA	; 250
    2c62:	54 e4       	ldi	r21, 0x44	; 68
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	8b a3       	std	Y+35, r24	; 0x23
    2c6e:	9c a3       	std	Y+36, r25	; 0x24
    2c70:	ad a3       	std	Y+37, r26	; 0x25
    2c72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c74:	6b a1       	ldd	r22, Y+35	; 0x23
    2c76:	7c a1       	ldd	r23, Y+36	; 0x24
    2c78:	8d a1       	ldd	r24, Y+37	; 0x25
    2c7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e8       	ldi	r20, 0x80	; 128
    2c82:	5f e3       	ldi	r21, 0x3F	; 63
    2c84:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c88:	88 23       	and	r24, r24
    2c8a:	2c f4       	brge	.+10     	; 0x2c96 <main+0x3dc>
		__ticks = 1;
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	9a a3       	std	Y+34, r25	; 0x22
    2c92:	89 a3       	std	Y+33, r24	; 0x21
    2c94:	3f c0       	rjmp	.+126    	; 0x2d14 <main+0x45a>
	else if (__tmp > 65535)
    2c96:	6b a1       	ldd	r22, Y+35	; 0x23
    2c98:	7c a1       	ldd	r23, Y+36	; 0x24
    2c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	3f ef       	ldi	r19, 0xFF	; 255
    2ca2:	4f e7       	ldi	r20, 0x7F	; 127
    2ca4:	57 e4       	ldi	r21, 0x47	; 71
    2ca6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2caa:	18 16       	cp	r1, r24
    2cac:	4c f5       	brge	.+82     	; 0x2d00 <main+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cae:	6f a1       	ldd	r22, Y+39	; 0x27
    2cb0:	78 a5       	ldd	r23, Y+40	; 0x28
    2cb2:	89 a5       	ldd	r24, Y+41	; 0x29
    2cb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e2       	ldi	r20, 0x20	; 32
    2cbc:	51 e4       	ldi	r21, 0x41	; 65
    2cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	9a a3       	std	Y+34, r25	; 0x22
    2cd4:	89 a3       	std	Y+33, r24	; 0x21
    2cd6:	0f c0       	rjmp	.+30     	; 0x2cf6 <main+0x43c>
    2cd8:	88 ec       	ldi	r24, 0xC8	; 200
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	98 a3       	std	Y+32, r25	; 0x20
    2cde:	8f 8f       	std	Y+31, r24	; 0x1f
    2ce0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ce2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <main+0x42a>
    2ce8:	98 a3       	std	Y+32, r25	; 0x20
    2cea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cec:	89 a1       	ldd	r24, Y+33	; 0x21
    2cee:	9a a1       	ldd	r25, Y+34	; 0x22
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	9a a3       	std	Y+34, r25	; 0x22
    2cf4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf6:	89 a1       	ldd	r24, Y+33	; 0x21
    2cf8:	9a a1       	ldd	r25, Y+34	; 0x22
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	69 f7       	brne	.-38     	; 0x2cd8 <main+0x41e>
    2cfe:	14 c0       	rjmp	.+40     	; 0x2d28 <main+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d00:	6b a1       	ldd	r22, Y+35	; 0x23
    2d02:	7c a1       	ldd	r23, Y+36	; 0x24
    2d04:	8d a1       	ldd	r24, Y+37	; 0x25
    2d06:	9e a1       	ldd	r25, Y+38	; 0x26
    2d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	9a a3       	std	Y+34, r25	; 0x22
    2d12:	89 a3       	std	Y+33, r24	; 0x21
    2d14:	89 a1       	ldd	r24, Y+33	; 0x21
    2d16:	9a a1       	ldd	r25, Y+34	; 0x22
    2d18:	9e 8f       	std	Y+30, r25	; 0x1e
    2d1a:	8d 8f       	std	Y+29, r24	; 0x1d
    2d1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <main+0x466>
    2d24:	9e 8f       	std	Y+30, r25	; 0x1e
    2d26:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(250);
	LCD_vidSendChar('.');
    2d28:	8e e2       	ldi	r24, 0x2E	; 46
    2d2a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	aa e7       	ldi	r26, 0x7A	; 122
    2d34:	b3 e4       	ldi	r27, 0x43	; 67
    2d36:	89 8f       	std	Y+25, r24	; 0x19
    2d38:	9a 8f       	std	Y+26, r25	; 0x1a
    2d3a:	ab 8f       	std	Y+27, r26	; 0x1b
    2d3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	4a ef       	ldi	r20, 0xFA	; 250
    2d4c:	54 e4       	ldi	r21, 0x44	; 68
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	8d 8b       	std	Y+21, r24	; 0x15
    2d58:	9e 8b       	std	Y+22, r25	; 0x16
    2d5a:	af 8b       	std	Y+23, r26	; 0x17
    2d5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d60:	7e 89       	ldd	r23, Y+22	; 0x16
    2d62:	8f 89       	ldd	r24, Y+23	; 0x17
    2d64:	98 8d       	ldd	r25, Y+24	; 0x18
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e8       	ldi	r20, 0x80	; 128
    2d6c:	5f e3       	ldi	r21, 0x3F	; 63
    2d6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d72:	88 23       	and	r24, r24
    2d74:	2c f4       	brge	.+10     	; 0x2d80 <main+0x4c6>
		__ticks = 1;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	9c 8b       	std	Y+20, r25	; 0x14
    2d7c:	8b 8b       	std	Y+19, r24	; 0x13
    2d7e:	3f c0       	rjmp	.+126    	; 0x2dfe <main+0x544>
	else if (__tmp > 65535)
    2d80:	6d 89       	ldd	r22, Y+21	; 0x15
    2d82:	7e 89       	ldd	r23, Y+22	; 0x16
    2d84:	8f 89       	ldd	r24, Y+23	; 0x17
    2d86:	98 8d       	ldd	r25, Y+24	; 0x18
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	3f ef       	ldi	r19, 0xFF	; 255
    2d8c:	4f e7       	ldi	r20, 0x7F	; 127
    2d8e:	57 e4       	ldi	r21, 0x47	; 71
    2d90:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d94:	18 16       	cp	r1, r24
    2d96:	4c f5       	brge	.+82     	; 0x2dea <main+0x530>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d98:	69 8d       	ldd	r22, Y+25	; 0x19
    2d9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e2       	ldi	r20, 0x20	; 32
    2da6:	51 e4       	ldi	r21, 0x41	; 65
    2da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	9c 8b       	std	Y+20, r25	; 0x14
    2dbe:	8b 8b       	std	Y+19, r24	; 0x13
    2dc0:	0f c0       	rjmp	.+30     	; 0x2de0 <main+0x526>
    2dc2:	88 ec       	ldi	r24, 0xC8	; 200
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	9a 8b       	std	Y+18, r25	; 0x12
    2dc8:	89 8b       	std	Y+17, r24	; 0x11
    2dca:	89 89       	ldd	r24, Y+17	; 0x11
    2dcc:	9a 89       	ldd	r25, Y+18	; 0x12
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <main+0x514>
    2dd2:	9a 8b       	std	Y+18, r25	; 0x12
    2dd4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	9c 8b       	std	Y+20, r25	; 0x14
    2dde:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de0:	8b 89       	ldd	r24, Y+19	; 0x13
    2de2:	9c 89       	ldd	r25, Y+20	; 0x14
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	69 f7       	brne	.-38     	; 0x2dc2 <main+0x508>
    2de8:	14 c0       	rjmp	.+40     	; 0x2e12 <main+0x558>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dea:	6d 89       	ldd	r22, Y+21	; 0x15
    2dec:	7e 89       	ldd	r23, Y+22	; 0x16
    2dee:	8f 89       	ldd	r24, Y+23	; 0x17
    2df0:	98 8d       	ldd	r25, Y+24	; 0x18
    2df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	9c 8b       	std	Y+20, r25	; 0x14
    2dfc:	8b 8b       	std	Y+19, r24	; 0x13
    2dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2e00:	9c 89       	ldd	r25, Y+20	; 0x14
    2e02:	98 8b       	std	Y+16, r25	; 0x10
    2e04:	8f 87       	std	Y+15, r24	; 0x0f
    2e06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e08:	98 89       	ldd	r25, Y+16	; 0x10
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <main+0x550>
    2e0e:	98 8b       	std	Y+16, r25	; 0x10
    2e10:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);

	LCD_VidDisplayClear();
    2e12:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidDisplayClear>

	LCD_VidGoToXY(1,4);
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	64 e0       	ldi	r22, 0x04	; 4
    2e1a:	0e 94 39 12 	call	0x2472	; 0x2472 <LCD_VidGoToXY>
	LCD_vidWriteString("Welcame");
    2e1e:	89 e6       	ldi	r24, 0x69	; 105
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_vidWriteString>
	LCD_VidGoToXY(2,2);
    2e26:	82 e0       	ldi	r24, 0x02	; 2
    2e28:	62 e0       	ldi	r22, 0x02	; 2
    2e2a:	0e 94 39 12 	call	0x2472	; 0x2472 <LCD_VidGoToXY>
	LCD_vidWriteString("Clac Is Ready");
    2e2e:	81 e7       	ldi	r24, 0x71	; 113
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_vidWriteString>
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	a6 e9       	ldi	r26, 0x96	; 150
    2e3c:	b4 e4       	ldi	r27, 0x44	; 68
    2e3e:	8b 87       	std	Y+11, r24	; 0x0b
    2e40:	9c 87       	std	Y+12, r25	; 0x0c
    2e42:	ad 87       	std	Y+13, r26	; 0x0d
    2e44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	4a ef       	ldi	r20, 0xFA	; 250
    2e54:	54 e4       	ldi	r21, 0x44	; 68
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	8f 83       	std	Y+7, r24	; 0x07
    2e60:	98 87       	std	Y+8, r25	; 0x08
    2e62:	a9 87       	std	Y+9, r26	; 0x09
    2e64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e66:	6f 81       	ldd	r22, Y+7	; 0x07
    2e68:	78 85       	ldd	r23, Y+8	; 0x08
    2e6a:	89 85       	ldd	r24, Y+9	; 0x09
    2e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e8       	ldi	r20, 0x80	; 128
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e7a:	88 23       	and	r24, r24
    2e7c:	2c f4       	brge	.+10     	; 0x2e88 <main+0x5ce>
		__ticks = 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9e 83       	std	Y+6, r25	; 0x06
    2e84:	8d 83       	std	Y+5, r24	; 0x05
    2e86:	3f c0       	rjmp	.+126    	; 0x2f06 <main+0x64c>
	else if (__tmp > 65535)
    2e88:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8a:	78 85       	ldd	r23, Y+8	; 0x08
    2e8c:	89 85       	ldd	r24, Y+9	; 0x09
    2e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	3f ef       	ldi	r19, 0xFF	; 255
    2e94:	4f e7       	ldi	r20, 0x7F	; 127
    2e96:	57 e4       	ldi	r21, 0x47	; 71
    2e98:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e9c:	18 16       	cp	r1, r24
    2e9e:	4c f5       	brge	.+82     	; 0x2ef2 <main+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	40 e2       	ldi	r20, 0x20	; 32
    2eae:	51 e4       	ldi	r21, 0x41	; 65
    2eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	9e 83       	std	Y+6, r25	; 0x06
    2ec6:	8d 83       	std	Y+5, r24	; 0x05
    2ec8:	0f c0       	rjmp	.+30     	; 0x2ee8 <main+0x62e>
    2eca:	88 ec       	ldi	r24, 0xC8	; 200
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	9c 83       	std	Y+4, r25	; 0x04
    2ed0:	8b 83       	std	Y+3, r24	; 0x03
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <main+0x61c>
    2eda:	9c 83       	std	Y+4, r25	; 0x04
    2edc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ede:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eea:	9e 81       	ldd	r25, Y+6	; 0x06
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	69 f7       	brne	.-38     	; 0x2eca <main+0x610>
    2ef0:	14 c0       	rjmp	.+40     	; 0x2f1a <main+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef4:	78 85       	ldd	r23, Y+8	; 0x08
    2ef6:	89 85       	ldd	r24, Y+9	; 0x09
    2ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	9e 83       	std	Y+6, r25	; 0x06
    2f04:	8d 83       	std	Y+5, r24	; 0x05
    2f06:	8d 81       	ldd	r24, Y+5	; 0x05
    2f08:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	9a 81       	ldd	r25, Y+2	; 0x02
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <main+0x658>
    2f16:	9a 83       	std	Y+2, r25	; 0x02
    2f18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1200);

	LCD_VidDisplayClear();
    2f1a:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidDisplayClear>

	while(1){
		num = KPD_U8GetPressedKey();
    2f1e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <KPD_U8GetPressedKey>
    2f22:	fe 01       	movw	r30, r28
    2f24:	eb 5a       	subi	r30, 0xAB	; 171
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	80 83       	st	Z, r24

		/* For Numbers */
		if ( !( num == KPD_U8_KEY_NOT_PRESSED ||  num == '/' ||  num == '*' ||  num == '+' ||  num == '-' ||  num == '=' || num == '%')  )
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	eb 5a       	subi	r30, 0xAB	; 171
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 81       	ld	r24, Z
    2f32:	82 33       	cpi	r24, 0x32	; 50
    2f34:	09 f4       	brne	.+2      	; 0x2f38 <main+0x67e>
    2f36:	6e c0       	rjmp	.+220    	; 0x3014 <main+0x75a>
    2f38:	fe 01       	movw	r30, r28
    2f3a:	eb 5a       	subi	r30, 0xAB	; 171
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 81       	ld	r24, Z
    2f40:	8f 32       	cpi	r24, 0x2F	; 47
    2f42:	09 f4       	brne	.+2      	; 0x2f46 <main+0x68c>
    2f44:	67 c0       	rjmp	.+206    	; 0x3014 <main+0x75a>
    2f46:	fe 01       	movw	r30, r28
    2f48:	eb 5a       	subi	r30, 0xAB	; 171
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	80 81       	ld	r24, Z
    2f4e:	8a 32       	cpi	r24, 0x2A	; 42
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <main+0x69a>
    2f52:	60 c0       	rjmp	.+192    	; 0x3014 <main+0x75a>
    2f54:	fe 01       	movw	r30, r28
    2f56:	eb 5a       	subi	r30, 0xAB	; 171
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	80 81       	ld	r24, Z
    2f5c:	8b 32       	cpi	r24, 0x2B	; 43
    2f5e:	09 f4       	brne	.+2      	; 0x2f62 <main+0x6a8>
    2f60:	59 c0       	rjmp	.+178    	; 0x3014 <main+0x75a>
    2f62:	fe 01       	movw	r30, r28
    2f64:	eb 5a       	subi	r30, 0xAB	; 171
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	80 81       	ld	r24, Z
    2f6a:	8d 32       	cpi	r24, 0x2D	; 45
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <main+0x6b6>
    2f6e:	52 c0       	rjmp	.+164    	; 0x3014 <main+0x75a>
    2f70:	fe 01       	movw	r30, r28
    2f72:	eb 5a       	subi	r30, 0xAB	; 171
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	80 81       	ld	r24, Z
    2f78:	8d 33       	cpi	r24, 0x3D	; 61
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <main+0x6c4>
    2f7c:	4b c0       	rjmp	.+150    	; 0x3014 <main+0x75a>
    2f7e:	fe 01       	movw	r30, r28
    2f80:	eb 5a       	subi	r30, 0xAB	; 171
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	80 81       	ld	r24, Z
    2f86:	85 32       	cpi	r24, 0x25	; 37
    2f88:	09 f4       	brne	.+2      	; 0x2f8c <main+0x6d2>
    2f8a:	44 c0       	rjmp	.+136    	; 0x3014 <main+0x75a>
		{
			if(Flag_EndG1 == 0){
    2f8c:	80 91 a7 01 	lds	r24, 0x01A7
    2f90:	88 23       	and	r24, r24
    2f92:	91 f4       	brne	.+36     	; 0x2fb8 <main+0x6fe>
				Arr1[index1] = num;
    2f94:	80 91 a6 01 	lds	r24, 0x01A6
    2f98:	88 2f       	mov	r24, r24
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	a7 54       	subi	r26, 0x47	; 71
    2fa0:	be 4f       	sbci	r27, 0xFE	; 254
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	eb 5a       	subi	r30, 0xAB	; 171
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	80 81       	ld	r24, Z
    2faa:	8c 93       	st	X, r24
				index1++;
    2fac:	80 91 a6 01 	lds	r24, 0x01A6
    2fb0:	8f 5f       	subi	r24, 0xFF	; 255
    2fb2:	80 93 a6 01 	sts	0x01A6, r24
    2fb6:	15 c0       	rjmp	.+42     	; 0x2fe2 <main+0x728>
			}
			else if (Flag_EndG1 == 1){
    2fb8:	80 91 a7 01 	lds	r24, 0x01A7
    2fbc:	81 30       	cpi	r24, 0x01	; 1
    2fbe:	89 f4       	brne	.+34     	; 0x2fe2 <main+0x728>
				Arr2[index2] = num;
    2fc0:	80 91 a8 01 	lds	r24, 0x01A8
    2fc4:	88 2f       	mov	r24, r24
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	dc 01       	movw	r26, r24
    2fca:	a4 54       	subi	r26, 0x44	; 68
    2fcc:	be 4f       	sbci	r27, 0xFE	; 254
    2fce:	fe 01       	movw	r30, r28
    2fd0:	eb 5a       	subi	r30, 0xAB	; 171
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	80 81       	ld	r24, Z
    2fd6:	8c 93       	st	X, r24
				index2++;
    2fd8:	80 91 a8 01 	lds	r24, 0x01A8
    2fdc:	8f 5f       	subi	r24, 0xFF	; 255
    2fde:	80 93 a8 01 	sts	0x01A8, r24
			}
			LCD_vidWriteNum(num);
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	eb 5a       	subi	r30, 0xAB	; 171
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	80 81       	ld	r24, Z
    2fea:	88 2f       	mov	r24, r24
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	a0 e0       	ldi	r26, 0x00	; 0
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	bc 01       	movw	r22, r24
    2ff4:	cd 01       	movw	r24, r26
    2ff6:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_vidWriteNum>

			/* Error if group num1,2 greater than 3 digits */
			if( index1 > 3 || index2 > 3  )
    2ffa:	80 91 a6 01 	lds	r24, 0x01A6
    2ffe:	84 30       	cpi	r24, 0x04	; 4
    3000:	20 f4       	brcc	.+8      	; 0x300a <main+0x750>
    3002:	80 91 a8 01 	lds	r24, 0x01A8
    3006:	84 30       	cpi	r24, 0x04	; 4
    3008:	10 f0       	brcs	.+4      	; 0x300e <main+0x754>
				Calc_VidError();
    300a:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <Calc_VidError>

			Calc_VidClearToDoAnatherOpration();
    300e:	0e 94 88 1a 	call	0x3510	; 0x3510 <Calc_VidClearToDoAnatherOpration>
    3012:	85 cf       	rjmp	.-246    	; 0x2f1e <main+0x664>

		}

		/* Clear*/
		else if(num !=KPD_U8_KEY_NOT_PRESSED && num == '%' )
    3014:	fe 01       	movw	r30, r28
    3016:	eb 5a       	subi	r30, 0xAB	; 171
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	80 81       	ld	r24, Z
    301c:	82 33       	cpi	r24, 0x32	; 50
    301e:	49 f0       	breq	.+18     	; 0x3032 <main+0x778>
    3020:	fe 01       	movw	r30, r28
    3022:	eb 5a       	subi	r30, 0xAB	; 171
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	80 81       	ld	r24, Z
    3028:	85 32       	cpi	r24, 0x25	; 37
    302a:	19 f4       	brne	.+6      	; 0x3032 <main+0x778>
		{
			Calc_VidClear();
    302c:	0e 94 c4 19 	call	0x3388	; 0x3388 <Calc_VidClear>
    3030:	76 cf       	rjmp	.-276    	; 0x2f1e <main+0x664>
		}


		/* For Statment */
		else if ( !( num == KPD_U8_KEY_NOT_PRESSED || num == '=') )
    3032:	fe 01       	movw	r30, r28
    3034:	eb 5a       	subi	r30, 0xAB	; 171
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 81       	ld	r24, Z
    303a:	82 33       	cpi	r24, 0x32	; 50
    303c:	09 f4       	brne	.+2      	; 0x3040 <main+0x786>
    303e:	5b c0       	rjmp	.+182    	; 0x30f6 <main+0x83c>
    3040:	fe 01       	movw	r30, r28
    3042:	eb 5a       	subi	r30, 0xAB	; 171
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	80 81       	ld	r24, Z
    3048:	8d 33       	cpi	r24, 0x3D	; 61
    304a:	09 f4       	brne	.+2      	; 0x304e <main+0x794>
    304c:	54 c0       	rjmp	.+168    	; 0x30f6 <main+0x83c>
		{
			Flag_EndG1 = 1;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	80 93 a7 01 	sts	0x01A7, r24
			Stat_Flag++;
    3054:	80 91 ab 01 	lds	r24, 0x01AB
    3058:	8f 5f       	subi	r24, 0xFF	; 255
    305a:	80 93 ab 01 	sts	0x01AB, r24

			/* For first Statment */
			if( Stat_Flag == 1 )
    305e:	80 91 ab 01 	lds	r24, 0x01AB
    3062:	81 30       	cpi	r24, 0x01	; 1
    3064:	59 f4       	brne	.+22     	; 0x307c <main+0x7c2>
			{
				Statment1 = num;
    3066:	fe 01       	movw	r30, r28
    3068:	eb 5a       	subi	r30, 0xAB	; 171
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	80 81       	ld	r24, Z
    306e:	80 93 a9 01 	sts	0x01A9, r24
				LCD_vidSendChar(Statment1);
    3072:	80 91 a9 01 	lds	r24, 0x01A9
    3076:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
    307a:	3a c0       	rjmp	.+116    	; 0x30f0 <main+0x836>
			}
			/* For Secand Statment */
			else if( Stat_Flag >= 2 )
    307c:	80 91 ab 01 	lds	r24, 0x01AB
    3080:	82 30       	cpi	r24, 0x02	; 2
    3082:	b0 f1       	brcs	.+108    	; 0x30f0 <main+0x836>
			{
				Statment2 = num;
    3084:	fe 01       	movw	r30, r28
    3086:	eb 5a       	subi	r30, 0xAB	; 171
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	80 93 aa 01 	sts	0x01AA, r24
				/* if input secand statment delete first statment */
				if( Statment2 != Statment1)
    3090:	90 91 aa 01 	lds	r25, 0x01AA
    3094:	80 91 a9 01 	lds	r24, 0x01A9
    3098:	98 17       	cp	r25, r24
    309a:	51 f1       	breq	.+84     	; 0x30f0 <main+0x836>
				{
					if( index1 == 1 ){
    309c:	80 91 a6 01 	lds	r24, 0x01A6
    30a0:	81 30       	cpi	r24, 0x01	; 1
    30a2:	49 f4       	brne	.+18     	; 0x30b6 <main+0x7fc>
						LCD_VidGoToXY(1,1);
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	61 e0       	ldi	r22, 0x01	; 1
    30a8:	0e 94 39 12 	call	0x2472	; 0x2472 <LCD_VidGoToXY>
						LCD_vidSendChar(Statment2);
    30ac:	80 91 aa 01 	lds	r24, 0x01AA
    30b0:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
    30b4:	19 c0       	rjmp	.+50     	; 0x30e8 <main+0x82e>
					}
					else if( index1 == 2 ){
    30b6:	80 91 a6 01 	lds	r24, 0x01A6
    30ba:	82 30       	cpi	r24, 0x02	; 2
    30bc:	49 f4       	brne	.+18     	; 0x30d0 <main+0x816>
						LCD_VidGoToXY(1,2);
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	62 e0       	ldi	r22, 0x02	; 2
    30c2:	0e 94 39 12 	call	0x2472	; 0x2472 <LCD_VidGoToXY>
						LCD_vidSendChar(Statment2);
    30c6:	80 91 aa 01 	lds	r24, 0x01AA
    30ca:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
    30ce:	0c c0       	rjmp	.+24     	; 0x30e8 <main+0x82e>
					}
					else if( index1 == 3 ){
    30d0:	80 91 a6 01 	lds	r24, 0x01A6
    30d4:	83 30       	cpi	r24, 0x03	; 3
    30d6:	41 f4       	brne	.+16     	; 0x30e8 <main+0x82e>
						LCD_VidGoToXY(1,3);
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	63 e0       	ldi	r22, 0x03	; 3
    30dc:	0e 94 39 12 	call	0x2472	; 0x2472 <LCD_VidGoToXY>
						LCD_vidSendChar(Statment2);
    30e0:	80 91 aa 01 	lds	r24, 0x01AA
    30e4:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
					}
					Statment1 = Statment2;
    30e8:	80 91 aa 01 	lds	r24, 0x01AA
    30ec:	80 93 a9 01 	sts	0x01A9, r24
				}
			}
			Calc_VidClearToDoAnatherOpration();
    30f0:	0e 94 88 1a 	call	0x3510	; 0x3510 <Calc_VidClearToDoAnatherOpration>
    30f4:	14 cf       	rjmp	.-472    	; 0x2f1e <main+0x664>


		}

		/* For "=" End Value */
		else if ( num !=KPD_U8_KEY_NOT_PRESSED && num == '=' )
    30f6:	fe 01       	movw	r30, r28
    30f8:	eb 5a       	subi	r30, 0xAB	; 171
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	80 81       	ld	r24, Z
    30fe:	82 33       	cpi	r24, 0x32	; 50
    3100:	09 f4       	brne	.+2      	; 0x3104 <main+0x84a>
    3102:	0d cf       	rjmp	.-486    	; 0x2f1e <main+0x664>
    3104:	fe 01       	movw	r30, r28
    3106:	eb 5a       	subi	r30, 0xAB	; 171
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	80 81       	ld	r24, Z
    310c:	8d 33       	cpi	r24, 0x3D	; 61
    310e:	09 f0       	breq	.+2      	; 0x3112 <main+0x858>
    3110:	06 cf       	rjmp	.-500    	; 0x2f1e <main+0x664>
		{
			Ruselt_Flag++;
    3112:	80 91 ac 01 	lds	r24, 0x01AC
    3116:	8f 5f       	subi	r24, 0xFF	; 255
    3118:	80 93 ac 01 	sts	0x01AC, r24
			LCD_vidSendChar(num);
    311c:	fe 01       	movw	r30, r28
    311e:	eb 5a       	subi	r30, 0xAB	; 171
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 81       	ld	r24, Z
    3124:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>

			Calc_VidGetValues();
    3128:	0e 94 95 1a 	call	0x352a	; 0x352a <Calc_VidGetValues>

			switch(Statment1)
    312c:	80 91 a9 01 	lds	r24, 0x01A9
    3130:	28 2f       	mov	r18, r24
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	68 96       	adiw	r28, 0x18	; 24
    3136:	3f af       	std	Y+63, r19	; 0x3f
    3138:	2e af       	std	Y+62, r18	; 0x3e
    313a:	68 97       	sbiw	r28, 0x18	; 24
    313c:	68 96       	adiw	r28, 0x18	; 24
    313e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3140:	9f ad       	ldd	r25, Y+63	; 0x3f
    3142:	68 97       	sbiw	r28, 0x18	; 24
    3144:	8b 32       	cpi	r24, 0x2B	; 43
    3146:	91 05       	cpc	r25, r1
    3148:	01 f1       	breq	.+64     	; 0x318a <main+0x8d0>
    314a:	68 96       	adiw	r28, 0x18	; 24
    314c:	ee ad       	ldd	r30, Y+62	; 0x3e
    314e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3150:	68 97       	sbiw	r28, 0x18	; 24
    3152:	ec 32       	cpi	r30, 0x2C	; 44
    3154:	f1 05       	cpc	r31, r1
    3156:	4c f4       	brge	.+18     	; 0x316a <main+0x8b0>
    3158:	68 96       	adiw	r28, 0x18	; 24
    315a:	2e ad       	ldd	r18, Y+62	; 0x3e
    315c:	3f ad       	ldd	r19, Y+63	; 0x3f
    315e:	68 97       	sbiw	r28, 0x18	; 24
    3160:	2a 32       	cpi	r18, 0x2A	; 42
    3162:	31 05       	cpc	r19, r1
    3164:	09 f4       	brne	.+2      	; 0x3168 <main+0x8ae>
    3166:	4f c0       	rjmp	.+158    	; 0x3206 <main+0x94c>
    3168:	8c c0       	rjmp	.+280    	; 0x3282 <main+0x9c8>
    316a:	68 96       	adiw	r28, 0x18	; 24
    316c:	8e ad       	ldd	r24, Y+62	; 0x3e
    316e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3170:	68 97       	sbiw	r28, 0x18	; 24
    3172:	8d 32       	cpi	r24, 0x2D	; 45
    3174:	91 05       	cpc	r25, r1
    3176:	41 f1       	breq	.+80     	; 0x31c8 <main+0x90e>
    3178:	68 96       	adiw	r28, 0x18	; 24
    317a:	ee ad       	ldd	r30, Y+62	; 0x3e
    317c:	ff ad       	ldd	r31, Y+63	; 0x3f
    317e:	68 97       	sbiw	r28, 0x18	; 24
    3180:	ef 32       	cpi	r30, 0x2F	; 47
    3182:	f1 05       	cpc	r31, r1
    3184:	09 f4       	brne	.+2      	; 0x3188 <main+0x8ce>
    3186:	5e c0       	rjmp	.+188    	; 0x3244 <main+0x98a>
    3188:	7c c0       	rjmp	.+248    	; 0x3282 <main+0x9c8>
			{
				case '+' :
							Ruselt = Value1 + Value2;
    318a:	80 91 ad 01 	lds	r24, 0x01AD
    318e:	90 91 ae 01 	lds	r25, 0x01AE
    3192:	a0 91 af 01 	lds	r26, 0x01AF
    3196:	b0 91 b0 01 	lds	r27, 0x01B0
    319a:	20 91 b1 01 	lds	r18, 0x01B1
    319e:	30 91 b2 01 	lds	r19, 0x01B2
    31a2:	40 91 b3 01 	lds	r20, 0x01B3
    31a6:	50 91 b4 01 	lds	r21, 0x01B4
    31aa:	bc 01       	movw	r22, r24
    31ac:	cd 01       	movw	r24, r26
    31ae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	80 93 b5 01 	sts	0x01B5, r24
    31ba:	90 93 b6 01 	sts	0x01B6, r25
    31be:	a0 93 b7 01 	sts	0x01B7, r26
    31c2:	b0 93 b8 01 	sts	0x01B8, r27
    31c6:	69 c0       	rjmp	.+210    	; 0x329a <main+0x9e0>
							break;
				case '-' :
							Ruselt = Value1 - Value2;
    31c8:	80 91 ad 01 	lds	r24, 0x01AD
    31cc:	90 91 ae 01 	lds	r25, 0x01AE
    31d0:	a0 91 af 01 	lds	r26, 0x01AF
    31d4:	b0 91 b0 01 	lds	r27, 0x01B0
    31d8:	20 91 b1 01 	lds	r18, 0x01B1
    31dc:	30 91 b2 01 	lds	r19, 0x01B2
    31e0:	40 91 b3 01 	lds	r20, 0x01B3
    31e4:	50 91 b4 01 	lds	r21, 0x01B4
    31e8:	bc 01       	movw	r22, r24
    31ea:	cd 01       	movw	r24, r26
    31ec:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	80 93 b5 01 	sts	0x01B5, r24
    31f8:	90 93 b6 01 	sts	0x01B6, r25
    31fc:	a0 93 b7 01 	sts	0x01B7, r26
    3200:	b0 93 b8 01 	sts	0x01B8, r27
    3204:	4a c0       	rjmp	.+148    	; 0x329a <main+0x9e0>
							break;
				case '*' :
							Ruselt = Value1 * Value2;
    3206:	80 91 ad 01 	lds	r24, 0x01AD
    320a:	90 91 ae 01 	lds	r25, 0x01AE
    320e:	a0 91 af 01 	lds	r26, 0x01AF
    3212:	b0 91 b0 01 	lds	r27, 0x01B0
    3216:	20 91 b1 01 	lds	r18, 0x01B1
    321a:	30 91 b2 01 	lds	r19, 0x01B2
    321e:	40 91 b3 01 	lds	r20, 0x01B3
    3222:	50 91 b4 01 	lds	r21, 0x01B4
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	80 93 b5 01 	sts	0x01B5, r24
    3236:	90 93 b6 01 	sts	0x01B6, r25
    323a:	a0 93 b7 01 	sts	0x01B7, r26
    323e:	b0 93 b8 01 	sts	0x01B8, r27
    3242:	2b c0       	rjmp	.+86     	; 0x329a <main+0x9e0>
							break;
				case '/' :
							Ruselt = Value1 / Value2;
    3244:	80 91 ad 01 	lds	r24, 0x01AD
    3248:	90 91 ae 01 	lds	r25, 0x01AE
    324c:	a0 91 af 01 	lds	r26, 0x01AF
    3250:	b0 91 b0 01 	lds	r27, 0x01B0
    3254:	20 91 b1 01 	lds	r18, 0x01B1
    3258:	30 91 b2 01 	lds	r19, 0x01B2
    325c:	40 91 b3 01 	lds	r20, 0x01B3
    3260:	50 91 b4 01 	lds	r21, 0x01B4
    3264:	bc 01       	movw	r22, r24
    3266:	cd 01       	movw	r24, r26
    3268:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	80 93 b5 01 	sts	0x01B5, r24
    3274:	90 93 b6 01 	sts	0x01B6, r25
    3278:	a0 93 b7 01 	sts	0x01B7, r26
    327c:	b0 93 b8 01 	sts	0x01B8, r27
    3280:	0c c0       	rjmp	.+24     	; 0x329a <main+0x9e0>
							break;

				default:  Ruselt = -1;
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	a0 e8       	ldi	r26, 0x80	; 128
    3288:	bf eb       	ldi	r27, 0xBF	; 191
    328a:	80 93 b5 01 	sts	0x01B5, r24
    328e:	90 93 b6 01 	sts	0x01B6, r25
    3292:	a0 93 b7 01 	sts	0x01B7, r26
    3296:	b0 93 b8 01 	sts	0x01B8, r27
			}

			/* To Detect Negative Numbers */
			if( Statment1 == '-'  && Value2 > Value1)
    329a:	80 91 a9 01 	lds	r24, 0x01A9
    329e:	8d 32       	cpi	r24, 0x2D	; 45
    32a0:	b9 f5       	brne	.+110    	; 0x3310 <main+0xa56>
    32a2:	80 91 b1 01 	lds	r24, 0x01B1
    32a6:	90 91 b2 01 	lds	r25, 0x01B2
    32aa:	a0 91 b3 01 	lds	r26, 0x01B3
    32ae:	b0 91 b4 01 	lds	r27, 0x01B4
    32b2:	20 91 ad 01 	lds	r18, 0x01AD
    32b6:	30 91 ae 01 	lds	r19, 0x01AE
    32ba:	40 91 af 01 	lds	r20, 0x01AF
    32be:	50 91 b0 01 	lds	r21, 0x01B0
    32c2:	bc 01       	movw	r22, r24
    32c4:	cd 01       	movw	r24, r26
    32c6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    32ca:	18 16       	cp	r1, r24
    32cc:	0c f5       	brge	.+66     	; 0x3310 <main+0xa56>
			{
				LCD_vidSendChar('-');
    32ce:	8d e2       	ldi	r24, 0x2D	; 45
    32d0:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_vidSendChar>
				Ruselt = Value2 - Value1;
    32d4:	80 91 b1 01 	lds	r24, 0x01B1
    32d8:	90 91 b2 01 	lds	r25, 0x01B2
    32dc:	a0 91 b3 01 	lds	r26, 0x01B3
    32e0:	b0 91 b4 01 	lds	r27, 0x01B4
    32e4:	20 91 ad 01 	lds	r18, 0x01AD
    32e8:	30 91 ae 01 	lds	r19, 0x01AE
    32ec:	40 91 af 01 	lds	r20, 0x01AF
    32f0:	50 91 b0 01 	lds	r21, 0x01B0
    32f4:	bc 01       	movw	r22, r24
    32f6:	cd 01       	movw	r24, r26
    32f8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	80 93 b5 01 	sts	0x01B5, r24
    3304:	90 93 b6 01 	sts	0x01B6, r25
    3308:	a0 93 b7 01 	sts	0x01B7, r26
    330c:	b0 93 b8 01 	sts	0x01B8, r27
			}



			/* To Show The Ruselt On LCD */
			if( Ruselt == -1 )
    3310:	80 91 b5 01 	lds	r24, 0x01B5
    3314:	90 91 b6 01 	lds	r25, 0x01B6
    3318:	a0 91 b7 01 	lds	r26, 0x01B7
    331c:	b0 91 b8 01 	lds	r27, 0x01B8
    3320:	bc 01       	movw	r22, r24
    3322:	cd 01       	movw	r24, r26
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e8       	ldi	r20, 0x80	; 128
    332a:	5f eb       	ldi	r21, 0xBF	; 191
    332c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3330:	88 23       	and	r24, r24
    3332:	19 f4       	brne	.+6      	; 0x333a <main+0xa80>
				Calc_VidError();
    3334:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <Calc_VidError>
    3338:	0c c0       	rjmp	.+24     	; 0x3352 <main+0xa98>
			else
			{
				/* To Detect Float Numbers */
				LCD_VidWriteFloatNum(Ruselt);
    333a:	80 91 b5 01 	lds	r24, 0x01B5
    333e:	90 91 b6 01 	lds	r25, 0x01B6
    3342:	a0 91 b7 01 	lds	r26, 0x01B7
    3346:	b0 91 b8 01 	lds	r27, 0x01B8
    334a:	bc 01       	movw	r22, r24
    334c:	cd 01       	movw	r24, r26
    334e:	0e 94 67 11 	call	0x22ce	; 0x22ce <LCD_VidWriteFloatNum>
			}

			/* Error if divided by 0 */
			if( Statment1 == '/' && Value2 == 0)
    3352:	80 91 a9 01 	lds	r24, 0x01A9
    3356:	8f 32       	cpi	r24, 0x2F	; 47
    3358:	09 f0       	breq	.+2      	; 0x335c <main+0xaa2>
    335a:	e1 cd       	rjmp	.-1086   	; 0x2f1e <main+0x664>
    335c:	80 91 b1 01 	lds	r24, 0x01B1
    3360:	90 91 b2 01 	lds	r25, 0x01B2
    3364:	a0 91 b3 01 	lds	r26, 0x01B3
    3368:	b0 91 b4 01 	lds	r27, 0x01B4
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	40 e0       	ldi	r20, 0x00	; 0
    3376:	50 e0       	ldi	r21, 0x00	; 0
    3378:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    337c:	88 23       	and	r24, r24
    337e:	09 f0       	breq	.+2      	; 0x3382 <main+0xac8>
    3380:	ce cd       	rjmp	.-1124   	; 0x2f1e <main+0x664>
				Calc_VidError();
    3382:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <Calc_VidError>
    3386:	cb cd       	rjmp	.-1130   	; 0x2f1e <main+0x664>

00003388 <Calc_VidClear>:





void Calc_VidClear(void){
    3388:	df 93       	push	r29
    338a:	cf 93       	push	r28
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
	Flag_EndG1 = 0;
    3390:	10 92 a7 01 	sts	0x01A7, r1
	index1 = 0;
    3394:	10 92 a6 01 	sts	0x01A6, r1
	index2 = 0;
    3398:	10 92 a8 01 	sts	0x01A8, r1
	Value1 = 0;
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	a0 e0       	ldi	r26, 0x00	; 0
    33a2:	b0 e0       	ldi	r27, 0x00	; 0
    33a4:	80 93 ad 01 	sts	0x01AD, r24
    33a8:	90 93 ae 01 	sts	0x01AE, r25
    33ac:	a0 93 af 01 	sts	0x01AF, r26
    33b0:	b0 93 b0 01 	sts	0x01B0, r27
	Value2 = 0;
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	a0 e0       	ldi	r26, 0x00	; 0
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	80 93 b1 01 	sts	0x01B1, r24
    33c0:	90 93 b2 01 	sts	0x01B2, r25
    33c4:	a0 93 b3 01 	sts	0x01B3, r26
    33c8:	b0 93 b4 01 	sts	0x01B4, r27
	Ruselt = -1;
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	a0 e8       	ldi	r26, 0x80	; 128
    33d2:	bf eb       	ldi	r27, 0xBF	; 191
    33d4:	80 93 b5 01 	sts	0x01B5, r24
    33d8:	90 93 b6 01 	sts	0x01B6, r25
    33dc:	a0 93 b7 01 	sts	0x01B7, r26
    33e0:	b0 93 b8 01 	sts	0x01B8, r27
	Stat_Flag = 0;
    33e4:	10 92 ab 01 	sts	0x01AB, r1
	Ruselt_Flag = 0;
    33e8:	10 92 ac 01 	sts	0x01AC, r1
	LCD_VidDisplayClear();
    33ec:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_VidDisplayClear>
}
    33f0:	cf 91       	pop	r28
    33f2:	df 91       	pop	r29
    33f4:	08 95       	ret

000033f6 <Calc_VidError>:

void Calc_VidError(void){
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	2e 97       	sbiw	r28, 0x0e	; 14
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	de bf       	out	0x3e, r29	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	cd bf       	out	0x3d, r28	; 61
	Calc_VidClear();
    340a:	0e 94 c4 19 	call	0x3388	; 0x3388 <Calc_VidClear>
	LCD_vidWriteString("Error");
    340e:	8f e7       	ldi	r24, 0x7F	; 127
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_vidWriteString>
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	aa e7       	ldi	r26, 0x7A	; 122
    341c:	b4 e4       	ldi	r27, 0x44	; 68
    341e:	8b 87       	std	Y+11, r24	; 0x0b
    3420:	9c 87       	std	Y+12, r25	; 0x0c
    3422:	ad 87       	std	Y+13, r26	; 0x0d
    3424:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3426:	6b 85       	ldd	r22, Y+11	; 0x0b
    3428:	7c 85       	ldd	r23, Y+12	; 0x0c
    342a:	8d 85       	ldd	r24, Y+13	; 0x0d
    342c:	9e 85       	ldd	r25, Y+14	; 0x0e
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	4a ef       	ldi	r20, 0xFA	; 250
    3434:	54 e4       	ldi	r21, 0x44	; 68
    3436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	8f 83       	std	Y+7, r24	; 0x07
    3440:	98 87       	std	Y+8, r25	; 0x08
    3442:	a9 87       	std	Y+9, r26	; 0x09
    3444:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3446:	6f 81       	ldd	r22, Y+7	; 0x07
    3448:	78 85       	ldd	r23, Y+8	; 0x08
    344a:	89 85       	ldd	r24, Y+9	; 0x09
    344c:	9a 85       	ldd	r25, Y+10	; 0x0a
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	40 e8       	ldi	r20, 0x80	; 128
    3454:	5f e3       	ldi	r21, 0x3F	; 63
    3456:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    345a:	88 23       	and	r24, r24
    345c:	2c f4       	brge	.+10     	; 0x3468 <Calc_VidError+0x72>
		__ticks = 1;
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	9e 83       	std	Y+6, r25	; 0x06
    3464:	8d 83       	std	Y+5, r24	; 0x05
    3466:	3f c0       	rjmp	.+126    	; 0x34e6 <Calc_VidError+0xf0>
	else if (__tmp > 65535)
    3468:	6f 81       	ldd	r22, Y+7	; 0x07
    346a:	78 85       	ldd	r23, Y+8	; 0x08
    346c:	89 85       	ldd	r24, Y+9	; 0x09
    346e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	3f ef       	ldi	r19, 0xFF	; 255
    3474:	4f e7       	ldi	r20, 0x7F	; 127
    3476:	57 e4       	ldi	r21, 0x47	; 71
    3478:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    347c:	18 16       	cp	r1, r24
    347e:	4c f5       	brge	.+82     	; 0x34d2 <Calc_VidError+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3480:	6b 85       	ldd	r22, Y+11	; 0x0b
    3482:	7c 85       	ldd	r23, Y+12	; 0x0c
    3484:	8d 85       	ldd	r24, Y+13	; 0x0d
    3486:	9e 85       	ldd	r25, Y+14	; 0x0e
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	40 e2       	ldi	r20, 0x20	; 32
    348e:	51 e4       	ldi	r21, 0x41	; 65
    3490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	bc 01       	movw	r22, r24
    349a:	cd 01       	movw	r24, r26
    349c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	9e 83       	std	Y+6, r25	; 0x06
    34a6:	8d 83       	std	Y+5, r24	; 0x05
    34a8:	0f c0       	rjmp	.+30     	; 0x34c8 <Calc_VidError+0xd2>
    34aa:	88 ec       	ldi	r24, 0xC8	; 200
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	9c 83       	std	Y+4, r25	; 0x04
    34b0:	8b 83       	std	Y+3, r24	; 0x03
    34b2:	8b 81       	ldd	r24, Y+3	; 0x03
    34b4:	9c 81       	ldd	r25, Y+4	; 0x04
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	f1 f7       	brne	.-4      	; 0x34b6 <Calc_VidError+0xc0>
    34ba:	9c 83       	std	Y+4, r25	; 0x04
    34bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34be:	8d 81       	ldd	r24, Y+5	; 0x05
    34c0:	9e 81       	ldd	r25, Y+6	; 0x06
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	9e 83       	std	Y+6, r25	; 0x06
    34c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ca:	9e 81       	ldd	r25, Y+6	; 0x06
    34cc:	00 97       	sbiw	r24, 0x00	; 0
    34ce:	69 f7       	brne	.-38     	; 0x34aa <Calc_VidError+0xb4>
    34d0:	14 c0       	rjmp	.+40     	; 0x34fa <Calc_VidError+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d2:	6f 81       	ldd	r22, Y+7	; 0x07
    34d4:	78 85       	ldd	r23, Y+8	; 0x08
    34d6:	89 85       	ldd	r24, Y+9	; 0x09
    34d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	9e 83       	std	Y+6, r25	; 0x06
    34e4:	8d 83       	std	Y+5, r24	; 0x05
    34e6:	8d 81       	ldd	r24, Y+5	; 0x05
    34e8:	9e 81       	ldd	r25, Y+6	; 0x06
    34ea:	9a 83       	std	Y+2, r25	; 0x02
    34ec:	89 83       	std	Y+1, r24	; 0x01
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
    34f0:	9a 81       	ldd	r25, Y+2	; 0x02
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	f1 f7       	brne	.-4      	; 0x34f2 <Calc_VidError+0xfc>
    34f6:	9a 83       	std	Y+2, r25	; 0x02
    34f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	Calc_VidClear();
    34fa:	0e 94 c4 19 	call	0x3388	; 0x3388 <Calc_VidClear>
}
    34fe:	2e 96       	adiw	r28, 0x0e	; 14
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	cf 91       	pop	r28
    350c:	df 91       	pop	r29
    350e:	08 95       	ret

00003510 <Calc_VidClearToDoAnatherOpration>:


void Calc_VidClearToDoAnatherOpration(void){
    3510:	df 93       	push	r29
    3512:	cf 93       	push	r28
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
	/* Clear to do a nather opratian */
	if(Ruselt_Flag >= 1)
    3518:	80 91 ac 01 	lds	r24, 0x01AC
    351c:	88 23       	and	r24, r24
    351e:	11 f0       	breq	.+4      	; 0x3524 <Calc_VidClearToDoAnatherOpration+0x14>
	{
		Calc_VidClear();
    3520:	0e 94 c4 19 	call	0x3388	; 0x3388 <Calc_VidClear>
	}
}
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	08 95       	ret

0000352a <Calc_VidGetValues>:
void Calc_VidGetValues(void){
    352a:	df 93       	push	r29
    352c:	cf 93       	push	r28
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
	if( index1 == 3 && index2 == 3 )
    3532:	80 91 a6 01 	lds	r24, 0x01A6
    3536:	83 30       	cpi	r24, 0x03	; 3
    3538:	09 f0       	breq	.+2      	; 0x353c <Calc_VidGetValues+0x12>
    353a:	72 c0       	rjmp	.+228    	; 0x3620 <Calc_VidGetValues+0xf6>
    353c:	80 91 a8 01 	lds	r24, 0x01A8
    3540:	83 30       	cpi	r24, 0x03	; 3
    3542:	09 f0       	breq	.+2      	; 0x3546 <Calc_VidGetValues+0x1c>
    3544:	6d c0       	rjmp	.+218    	; 0x3620 <Calc_VidGetValues+0xf6>
	{
		Value1 = Arr1[0]*100 + Arr1[1]*10 + Arr1[2];
    3546:	80 91 b9 01 	lds	r24, 0x01B9
    354a:	28 2f       	mov	r18, r24
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	84 e6       	ldi	r24, 0x64	; 100
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	28 9f       	mul	r18, r24
    3554:	a0 01       	movw	r20, r0
    3556:	29 9f       	mul	r18, r25
    3558:	50 0d       	add	r21, r0
    355a:	38 9f       	mul	r19, r24
    355c:	50 0d       	add	r21, r0
    355e:	11 24       	eor	r1, r1
    3560:	80 91 ba 01 	lds	r24, 0x01BA
    3564:	88 2f       	mov	r24, r24
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	9c 01       	movw	r18, r24
    356a:	22 0f       	add	r18, r18
    356c:	33 1f       	adc	r19, r19
    356e:	c9 01       	movw	r24, r18
    3570:	88 0f       	add	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	88 0f       	add	r24, r24
    3576:	99 1f       	adc	r25, r25
    3578:	82 0f       	add	r24, r18
    357a:	93 1f       	adc	r25, r19
    357c:	9a 01       	movw	r18, r20
    357e:	28 0f       	add	r18, r24
    3580:	39 1f       	adc	r19, r25
    3582:	80 91 bb 01 	lds	r24, 0x01BB
    3586:	88 2f       	mov	r24, r24
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	82 0f       	add	r24, r18
    358c:	93 1f       	adc	r25, r19
    358e:	aa 27       	eor	r26, r26
    3590:	97 fd       	sbrc	r25, 7
    3592:	a0 95       	com	r26
    3594:	ba 2f       	mov	r27, r26
    3596:	bc 01       	movw	r22, r24
    3598:	cd 01       	movw	r24, r26
    359a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	80 93 ad 01 	sts	0x01AD, r24
    35a6:	90 93 ae 01 	sts	0x01AE, r25
    35aa:	a0 93 af 01 	sts	0x01AF, r26
    35ae:	b0 93 b0 01 	sts	0x01B0, r27
		Value2 = Arr2[0]*100 + Arr2[1]*10 + Arr2[2];
    35b2:	80 91 bc 01 	lds	r24, 0x01BC
    35b6:	28 2f       	mov	r18, r24
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	84 e6       	ldi	r24, 0x64	; 100
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	28 9f       	mul	r18, r24
    35c0:	a0 01       	movw	r20, r0
    35c2:	29 9f       	mul	r18, r25
    35c4:	50 0d       	add	r21, r0
    35c6:	38 9f       	mul	r19, r24
    35c8:	50 0d       	add	r21, r0
    35ca:	11 24       	eor	r1, r1
    35cc:	80 91 bd 01 	lds	r24, 0x01BD
    35d0:	88 2f       	mov	r24, r24
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	9c 01       	movw	r18, r24
    35d6:	22 0f       	add	r18, r18
    35d8:	33 1f       	adc	r19, r19
    35da:	c9 01       	movw	r24, r18
    35dc:	88 0f       	add	r24, r24
    35de:	99 1f       	adc	r25, r25
    35e0:	88 0f       	add	r24, r24
    35e2:	99 1f       	adc	r25, r25
    35e4:	82 0f       	add	r24, r18
    35e6:	93 1f       	adc	r25, r19
    35e8:	9a 01       	movw	r18, r20
    35ea:	28 0f       	add	r18, r24
    35ec:	39 1f       	adc	r19, r25
    35ee:	80 91 be 01 	lds	r24, 0x01BE
    35f2:	88 2f       	mov	r24, r24
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	82 0f       	add	r24, r18
    35f8:	93 1f       	adc	r25, r19
    35fa:	aa 27       	eor	r26, r26
    35fc:	97 fd       	sbrc	r25, 7
    35fe:	a0 95       	com	r26
    3600:	ba 2f       	mov	r27, r26
    3602:	bc 01       	movw	r22, r24
    3604:	cd 01       	movw	r24, r26
    3606:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	80 93 b1 01 	sts	0x01B1, r24
    3612:	90 93 b2 01 	sts	0x01B2, r25
    3616:	a0 93 b3 01 	sts	0x01B3, r26
    361a:	b0 93 b4 01 	sts	0x01B4, r27
    361e:	87 c2       	rjmp	.+1294   	; 0x3b2e <Calc_VidGetValues+0x604>
	}
	else if (index1 == 3 && index2 == 2)
    3620:	80 91 a6 01 	lds	r24, 0x01A6
    3624:	83 30       	cpi	r24, 0x03	; 3
    3626:	09 f0       	breq	.+2      	; 0x362a <Calc_VidGetValues+0x100>
    3628:	62 c0       	rjmp	.+196    	; 0x36ee <Calc_VidGetValues+0x1c4>
    362a:	80 91 a8 01 	lds	r24, 0x01A8
    362e:	82 30       	cpi	r24, 0x02	; 2
    3630:	09 f0       	breq	.+2      	; 0x3634 <Calc_VidGetValues+0x10a>
    3632:	5d c0       	rjmp	.+186    	; 0x36ee <Calc_VidGetValues+0x1c4>
	{
		Value1 = Arr1[0]*100 + Arr1[1]*10 + Arr1[2];
    3634:	80 91 b9 01 	lds	r24, 0x01B9
    3638:	28 2f       	mov	r18, r24
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	84 e6       	ldi	r24, 0x64	; 100
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	28 9f       	mul	r18, r24
    3642:	a0 01       	movw	r20, r0
    3644:	29 9f       	mul	r18, r25
    3646:	50 0d       	add	r21, r0
    3648:	38 9f       	mul	r19, r24
    364a:	50 0d       	add	r21, r0
    364c:	11 24       	eor	r1, r1
    364e:	80 91 ba 01 	lds	r24, 0x01BA
    3652:	88 2f       	mov	r24, r24
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	9c 01       	movw	r18, r24
    3658:	22 0f       	add	r18, r18
    365a:	33 1f       	adc	r19, r19
    365c:	c9 01       	movw	r24, r18
    365e:	88 0f       	add	r24, r24
    3660:	99 1f       	adc	r25, r25
    3662:	88 0f       	add	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	82 0f       	add	r24, r18
    3668:	93 1f       	adc	r25, r19
    366a:	9a 01       	movw	r18, r20
    366c:	28 0f       	add	r18, r24
    366e:	39 1f       	adc	r19, r25
    3670:	80 91 bb 01 	lds	r24, 0x01BB
    3674:	88 2f       	mov	r24, r24
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	82 0f       	add	r24, r18
    367a:	93 1f       	adc	r25, r19
    367c:	aa 27       	eor	r26, r26
    367e:	97 fd       	sbrc	r25, 7
    3680:	a0 95       	com	r26
    3682:	ba 2f       	mov	r27, r26
    3684:	bc 01       	movw	r22, r24
    3686:	cd 01       	movw	r24, r26
    3688:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    368c:	dc 01       	movw	r26, r24
    368e:	cb 01       	movw	r24, r22
    3690:	80 93 ad 01 	sts	0x01AD, r24
    3694:	90 93 ae 01 	sts	0x01AE, r25
    3698:	a0 93 af 01 	sts	0x01AF, r26
    369c:	b0 93 b0 01 	sts	0x01B0, r27
		Value2 = Arr2[0]*10 + Arr2[1];
    36a0:	80 91 bc 01 	lds	r24, 0x01BC
    36a4:	88 2f       	mov	r24, r24
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	9c 01       	movw	r18, r24
    36aa:	22 0f       	add	r18, r18
    36ac:	33 1f       	adc	r19, r19
    36ae:	c9 01       	movw	r24, r18
    36b0:	88 0f       	add	r24, r24
    36b2:	99 1f       	adc	r25, r25
    36b4:	88 0f       	add	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	28 0f       	add	r18, r24
    36ba:	39 1f       	adc	r19, r25
    36bc:	80 91 bd 01 	lds	r24, 0x01BD
    36c0:	88 2f       	mov	r24, r24
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	82 0f       	add	r24, r18
    36c6:	93 1f       	adc	r25, r19
    36c8:	aa 27       	eor	r26, r26
    36ca:	97 fd       	sbrc	r25, 7
    36cc:	a0 95       	com	r26
    36ce:	ba 2f       	mov	r27, r26
    36d0:	bc 01       	movw	r22, r24
    36d2:	cd 01       	movw	r24, r26
    36d4:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	80 93 b1 01 	sts	0x01B1, r24
    36e0:	90 93 b2 01 	sts	0x01B2, r25
    36e4:	a0 93 b3 01 	sts	0x01B3, r26
    36e8:	b0 93 b4 01 	sts	0x01B4, r27
    36ec:	20 c2       	rjmp	.+1088   	; 0x3b2e <Calc_VidGetValues+0x604>
	}
	else if (index1 == 3 && index2 == 1)
    36ee:	80 91 a6 01 	lds	r24, 0x01A6
    36f2:	83 30       	cpi	r24, 0x03	; 3
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <Calc_VidGetValues+0x1ce>
    36f6:	50 c0       	rjmp	.+160    	; 0x3798 <Calc_VidGetValues+0x26e>
    36f8:	80 91 a8 01 	lds	r24, 0x01A8
    36fc:	81 30       	cpi	r24, 0x01	; 1
    36fe:	09 f0       	breq	.+2      	; 0x3702 <Calc_VidGetValues+0x1d8>
    3700:	4b c0       	rjmp	.+150    	; 0x3798 <Calc_VidGetValues+0x26e>
	{
		Value1 = Arr1[0]*100 + Arr1[1]*10 + Arr1[2];
    3702:	80 91 b9 01 	lds	r24, 0x01B9
    3706:	28 2f       	mov	r18, r24
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	84 e6       	ldi	r24, 0x64	; 100
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	28 9f       	mul	r18, r24
    3710:	a0 01       	movw	r20, r0
    3712:	29 9f       	mul	r18, r25
    3714:	50 0d       	add	r21, r0
    3716:	38 9f       	mul	r19, r24
    3718:	50 0d       	add	r21, r0
    371a:	11 24       	eor	r1, r1
    371c:	80 91 ba 01 	lds	r24, 0x01BA
    3720:	88 2f       	mov	r24, r24
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	9c 01       	movw	r18, r24
    3726:	22 0f       	add	r18, r18
    3728:	33 1f       	adc	r19, r19
    372a:	c9 01       	movw	r24, r18
    372c:	88 0f       	add	r24, r24
    372e:	99 1f       	adc	r25, r25
    3730:	88 0f       	add	r24, r24
    3732:	99 1f       	adc	r25, r25
    3734:	82 0f       	add	r24, r18
    3736:	93 1f       	adc	r25, r19
    3738:	9a 01       	movw	r18, r20
    373a:	28 0f       	add	r18, r24
    373c:	39 1f       	adc	r19, r25
    373e:	80 91 bb 01 	lds	r24, 0x01BB
    3742:	88 2f       	mov	r24, r24
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	82 0f       	add	r24, r18
    3748:	93 1f       	adc	r25, r19
    374a:	aa 27       	eor	r26, r26
    374c:	97 fd       	sbrc	r25, 7
    374e:	a0 95       	com	r26
    3750:	ba 2f       	mov	r27, r26
    3752:	bc 01       	movw	r22, r24
    3754:	cd 01       	movw	r24, r26
    3756:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	80 93 ad 01 	sts	0x01AD, r24
    3762:	90 93 ae 01 	sts	0x01AE, r25
    3766:	a0 93 af 01 	sts	0x01AF, r26
    376a:	b0 93 b0 01 	sts	0x01B0, r27
		Value2 = Arr2[0];
    376e:	80 91 bc 01 	lds	r24, 0x01BC
    3772:	88 2f       	mov	r24, r24
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	a0 e0       	ldi	r26, 0x00	; 0
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	bc 01       	movw	r22, r24
    377c:	cd 01       	movw	r24, r26
    377e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	80 93 b1 01 	sts	0x01B1, r24
    378a:	90 93 b2 01 	sts	0x01B2, r25
    378e:	a0 93 b3 01 	sts	0x01B3, r26
    3792:	b0 93 b4 01 	sts	0x01B4, r27
    3796:	cb c1       	rjmp	.+918    	; 0x3b2e <Calc_VidGetValues+0x604>
	}
	else if (index1 == 2 && index2 == 3)
    3798:	80 91 a6 01 	lds	r24, 0x01A6
    379c:	82 30       	cpi	r24, 0x02	; 2
    379e:	09 f0       	breq	.+2      	; 0x37a2 <Calc_VidGetValues+0x278>
    37a0:	62 c0       	rjmp	.+196    	; 0x3866 <Calc_VidGetValues+0x33c>
    37a2:	80 91 a8 01 	lds	r24, 0x01A8
    37a6:	83 30       	cpi	r24, 0x03	; 3
    37a8:	09 f0       	breq	.+2      	; 0x37ac <Calc_VidGetValues+0x282>
    37aa:	5d c0       	rjmp	.+186    	; 0x3866 <Calc_VidGetValues+0x33c>
	{
		Value1 = Arr1[0]*10 + Arr1[1];
    37ac:	80 91 b9 01 	lds	r24, 0x01B9
    37b0:	88 2f       	mov	r24, r24
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	9c 01       	movw	r18, r24
    37b6:	22 0f       	add	r18, r18
    37b8:	33 1f       	adc	r19, r19
    37ba:	c9 01       	movw	r24, r18
    37bc:	88 0f       	add	r24, r24
    37be:	99 1f       	adc	r25, r25
    37c0:	88 0f       	add	r24, r24
    37c2:	99 1f       	adc	r25, r25
    37c4:	28 0f       	add	r18, r24
    37c6:	39 1f       	adc	r19, r25
    37c8:	80 91 ba 01 	lds	r24, 0x01BA
    37cc:	88 2f       	mov	r24, r24
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	82 0f       	add	r24, r18
    37d2:	93 1f       	adc	r25, r19
    37d4:	aa 27       	eor	r26, r26
    37d6:	97 fd       	sbrc	r25, 7
    37d8:	a0 95       	com	r26
    37da:	ba 2f       	mov	r27, r26
    37dc:	bc 01       	movw	r22, r24
    37de:	cd 01       	movw	r24, r26
    37e0:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	80 93 ad 01 	sts	0x01AD, r24
    37ec:	90 93 ae 01 	sts	0x01AE, r25
    37f0:	a0 93 af 01 	sts	0x01AF, r26
    37f4:	b0 93 b0 01 	sts	0x01B0, r27
		Value2 = Arr2[0]*100 + Arr2[1]*10 + Arr2[2];
    37f8:	80 91 bc 01 	lds	r24, 0x01BC
    37fc:	28 2f       	mov	r18, r24
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	84 e6       	ldi	r24, 0x64	; 100
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	28 9f       	mul	r18, r24
    3806:	a0 01       	movw	r20, r0
    3808:	29 9f       	mul	r18, r25
    380a:	50 0d       	add	r21, r0
    380c:	38 9f       	mul	r19, r24
    380e:	50 0d       	add	r21, r0
    3810:	11 24       	eor	r1, r1
    3812:	80 91 bd 01 	lds	r24, 0x01BD
    3816:	88 2f       	mov	r24, r24
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	9c 01       	movw	r18, r24
    381c:	22 0f       	add	r18, r18
    381e:	33 1f       	adc	r19, r19
    3820:	c9 01       	movw	r24, r18
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	88 0f       	add	r24, r24
    3828:	99 1f       	adc	r25, r25
    382a:	82 0f       	add	r24, r18
    382c:	93 1f       	adc	r25, r19
    382e:	9a 01       	movw	r18, r20
    3830:	28 0f       	add	r18, r24
    3832:	39 1f       	adc	r19, r25
    3834:	80 91 be 01 	lds	r24, 0x01BE
    3838:	88 2f       	mov	r24, r24
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	82 0f       	add	r24, r18
    383e:	93 1f       	adc	r25, r19
    3840:	aa 27       	eor	r26, r26
    3842:	97 fd       	sbrc	r25, 7
    3844:	a0 95       	com	r26
    3846:	ba 2f       	mov	r27, r26
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	80 93 b1 01 	sts	0x01B1, r24
    3858:	90 93 b2 01 	sts	0x01B2, r25
    385c:	a0 93 b3 01 	sts	0x01B3, r26
    3860:	b0 93 b4 01 	sts	0x01B4, r27
    3864:	64 c1       	rjmp	.+712    	; 0x3b2e <Calc_VidGetValues+0x604>
	}
	else if (index1 == 2 && index2 == 2)
    3866:	80 91 a6 01 	lds	r24, 0x01A6
    386a:	82 30       	cpi	r24, 0x02	; 2
    386c:	09 f0       	breq	.+2      	; 0x3870 <Calc_VidGetValues+0x346>
    386e:	52 c0       	rjmp	.+164    	; 0x3914 <Calc_VidGetValues+0x3ea>
    3870:	80 91 a8 01 	lds	r24, 0x01A8
    3874:	82 30       	cpi	r24, 0x02	; 2
    3876:	09 f0       	breq	.+2      	; 0x387a <Calc_VidGetValues+0x350>
    3878:	4d c0       	rjmp	.+154    	; 0x3914 <Calc_VidGetValues+0x3ea>
	{
		Value1 = Arr1[0]*10 + Arr1[1];
    387a:	80 91 b9 01 	lds	r24, 0x01B9
    387e:	88 2f       	mov	r24, r24
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	9c 01       	movw	r18, r24
    3884:	22 0f       	add	r18, r18
    3886:	33 1f       	adc	r19, r19
    3888:	c9 01       	movw	r24, r18
    388a:	88 0f       	add	r24, r24
    388c:	99 1f       	adc	r25, r25
    388e:	88 0f       	add	r24, r24
    3890:	99 1f       	adc	r25, r25
    3892:	28 0f       	add	r18, r24
    3894:	39 1f       	adc	r19, r25
    3896:	80 91 ba 01 	lds	r24, 0x01BA
    389a:	88 2f       	mov	r24, r24
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	82 0f       	add	r24, r18
    38a0:	93 1f       	adc	r25, r19
    38a2:	aa 27       	eor	r26, r26
    38a4:	97 fd       	sbrc	r25, 7
    38a6:	a0 95       	com	r26
    38a8:	ba 2f       	mov	r27, r26
    38aa:	bc 01       	movw	r22, r24
    38ac:	cd 01       	movw	r24, r26
    38ae:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	80 93 ad 01 	sts	0x01AD, r24
    38ba:	90 93 ae 01 	sts	0x01AE, r25
    38be:	a0 93 af 01 	sts	0x01AF, r26
    38c2:	b0 93 b0 01 	sts	0x01B0, r27
		Value2 = Arr2[0]*10 + Arr2[1];
    38c6:	80 91 bc 01 	lds	r24, 0x01BC
    38ca:	88 2f       	mov	r24, r24
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	9c 01       	movw	r18, r24
    38d0:	22 0f       	add	r18, r18
    38d2:	33 1f       	adc	r19, r19
    38d4:	c9 01       	movw	r24, r18
    38d6:	88 0f       	add	r24, r24
    38d8:	99 1f       	adc	r25, r25
    38da:	88 0f       	add	r24, r24
    38dc:	99 1f       	adc	r25, r25
    38de:	28 0f       	add	r18, r24
    38e0:	39 1f       	adc	r19, r25
    38e2:	80 91 bd 01 	lds	r24, 0x01BD
    38e6:	88 2f       	mov	r24, r24
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	82 0f       	add	r24, r18
    38ec:	93 1f       	adc	r25, r19
    38ee:	aa 27       	eor	r26, r26
    38f0:	97 fd       	sbrc	r25, 7
    38f2:	a0 95       	com	r26
    38f4:	ba 2f       	mov	r27, r26
    38f6:	bc 01       	movw	r22, r24
    38f8:	cd 01       	movw	r24, r26
    38fa:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	80 93 b1 01 	sts	0x01B1, r24
    3906:	90 93 b2 01 	sts	0x01B2, r25
    390a:	a0 93 b3 01 	sts	0x01B3, r26
    390e:	b0 93 b4 01 	sts	0x01B4, r27
    3912:	0d c1       	rjmp	.+538    	; 0x3b2e <Calc_VidGetValues+0x604>
	}
	else if (index1 == 2 && index2 == 1)
    3914:	80 91 a6 01 	lds	r24, 0x01A6
    3918:	82 30       	cpi	r24, 0x02	; 2
    391a:	09 f0       	breq	.+2      	; 0x391e <Calc_VidGetValues+0x3f4>
    391c:	3f c0       	rjmp	.+126    	; 0x399c <Calc_VidGetValues+0x472>
    391e:	80 91 a8 01 	lds	r24, 0x01A8
    3922:	81 30       	cpi	r24, 0x01	; 1
    3924:	d9 f5       	brne	.+118    	; 0x399c <Calc_VidGetValues+0x472>
	{
		Value1 = Arr1[0]*10 + Arr1[1];
    3926:	80 91 b9 01 	lds	r24, 0x01B9
    392a:	88 2f       	mov	r24, r24
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	9c 01       	movw	r18, r24
    3930:	22 0f       	add	r18, r18
    3932:	33 1f       	adc	r19, r19
    3934:	c9 01       	movw	r24, r18
    3936:	88 0f       	add	r24, r24
    3938:	99 1f       	adc	r25, r25
    393a:	88 0f       	add	r24, r24
    393c:	99 1f       	adc	r25, r25
    393e:	28 0f       	add	r18, r24
    3940:	39 1f       	adc	r19, r25
    3942:	80 91 ba 01 	lds	r24, 0x01BA
    3946:	88 2f       	mov	r24, r24
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	82 0f       	add	r24, r18
    394c:	93 1f       	adc	r25, r19
    394e:	aa 27       	eor	r26, r26
    3950:	97 fd       	sbrc	r25, 7
    3952:	a0 95       	com	r26
    3954:	ba 2f       	mov	r27, r26
    3956:	bc 01       	movw	r22, r24
    3958:	cd 01       	movw	r24, r26
    395a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	80 93 ad 01 	sts	0x01AD, r24
    3966:	90 93 ae 01 	sts	0x01AE, r25
    396a:	a0 93 af 01 	sts	0x01AF, r26
    396e:	b0 93 b0 01 	sts	0x01B0, r27
		Value2 = Arr2[0];
    3972:	80 91 bc 01 	lds	r24, 0x01BC
    3976:	88 2f       	mov	r24, r24
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	a0 e0       	ldi	r26, 0x00	; 0
    397c:	b0 e0       	ldi	r27, 0x00	; 0
    397e:	bc 01       	movw	r22, r24
    3980:	cd 01       	movw	r24, r26
    3982:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	80 93 b1 01 	sts	0x01B1, r24
    398e:	90 93 b2 01 	sts	0x01B2, r25
    3992:	a0 93 b3 01 	sts	0x01B3, r26
    3996:	b0 93 b4 01 	sts	0x01B4, r27
    399a:	c9 c0       	rjmp	.+402    	; 0x3b2e <Calc_VidGetValues+0x604>
	}
	else if (index1 == 1 && index2 == 1)
    399c:	80 91 a6 01 	lds	r24, 0x01A6
    39a0:	81 30       	cpi	r24, 0x01	; 1
    39a2:	69 f5       	brne	.+90     	; 0x39fe <Calc_VidGetValues+0x4d4>
    39a4:	80 91 a8 01 	lds	r24, 0x01A8
    39a8:	81 30       	cpi	r24, 0x01	; 1
    39aa:	49 f5       	brne	.+82     	; 0x39fe <Calc_VidGetValues+0x4d4>
	{
		Value1 = Arr1[0];
    39ac:	80 91 b9 01 	lds	r24, 0x01B9
    39b0:	88 2f       	mov	r24, r24
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	a0 e0       	ldi	r26, 0x00	; 0
    39b6:	b0 e0       	ldi	r27, 0x00	; 0
    39b8:	bc 01       	movw	r22, r24
    39ba:	cd 01       	movw	r24, r26
    39bc:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	80 93 ad 01 	sts	0x01AD, r24
    39c8:	90 93 ae 01 	sts	0x01AE, r25
    39cc:	a0 93 af 01 	sts	0x01AF, r26
    39d0:	b0 93 b0 01 	sts	0x01B0, r27
		Value2 = Arr2[0];
    39d4:	80 91 bc 01 	lds	r24, 0x01BC
    39d8:	88 2f       	mov	r24, r24
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	a0 e0       	ldi	r26, 0x00	; 0
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	bc 01       	movw	r22, r24
    39e2:	cd 01       	movw	r24, r26
    39e4:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	80 93 b1 01 	sts	0x01B1, r24
    39f0:	90 93 b2 01 	sts	0x01B2, r25
    39f4:	a0 93 b3 01 	sts	0x01B3, r26
    39f8:	b0 93 b4 01 	sts	0x01B4, r27
    39fc:	98 c0       	rjmp	.+304    	; 0x3b2e <Calc_VidGetValues+0x604>
	}
	else if (index1 == 1 && index2 == 2)
    39fe:	80 91 a6 01 	lds	r24, 0x01A6
    3a02:	81 30       	cpi	r24, 0x01	; 1
    3a04:	09 f0       	breq	.+2      	; 0x3a08 <Calc_VidGetValues+0x4de>
    3a06:	3f c0       	rjmp	.+126    	; 0x3a86 <Calc_VidGetValues+0x55c>
    3a08:	80 91 a8 01 	lds	r24, 0x01A8
    3a0c:	82 30       	cpi	r24, 0x02	; 2
    3a0e:	d9 f5       	brne	.+118    	; 0x3a86 <Calc_VidGetValues+0x55c>
	{
		Value1 = Arr1[0];
    3a10:	80 91 b9 01 	lds	r24, 0x01B9
    3a14:	88 2f       	mov	r24, r24
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	a0 e0       	ldi	r26, 0x00	; 0
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	bc 01       	movw	r22, r24
    3a1e:	cd 01       	movw	r24, r26
    3a20:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	80 93 ad 01 	sts	0x01AD, r24
    3a2c:	90 93 ae 01 	sts	0x01AE, r25
    3a30:	a0 93 af 01 	sts	0x01AF, r26
    3a34:	b0 93 b0 01 	sts	0x01B0, r27
		Value2 = Arr2[0]*10 + Arr2[1];
    3a38:	80 91 bc 01 	lds	r24, 0x01BC
    3a3c:	88 2f       	mov	r24, r24
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	9c 01       	movw	r18, r24
    3a42:	22 0f       	add	r18, r18
    3a44:	33 1f       	adc	r19, r19
    3a46:	c9 01       	movw	r24, r18
    3a48:	88 0f       	add	r24, r24
    3a4a:	99 1f       	adc	r25, r25
    3a4c:	88 0f       	add	r24, r24
    3a4e:	99 1f       	adc	r25, r25
    3a50:	28 0f       	add	r18, r24
    3a52:	39 1f       	adc	r19, r25
    3a54:	80 91 bd 01 	lds	r24, 0x01BD
    3a58:	88 2f       	mov	r24, r24
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	82 0f       	add	r24, r18
    3a5e:	93 1f       	adc	r25, r19
    3a60:	aa 27       	eor	r26, r26
    3a62:	97 fd       	sbrc	r25, 7
    3a64:	a0 95       	com	r26
    3a66:	ba 2f       	mov	r27, r26
    3a68:	bc 01       	movw	r22, r24
    3a6a:	cd 01       	movw	r24, r26
    3a6c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	80 93 b1 01 	sts	0x01B1, r24
    3a78:	90 93 b2 01 	sts	0x01B2, r25
    3a7c:	a0 93 b3 01 	sts	0x01B3, r26
    3a80:	b0 93 b4 01 	sts	0x01B4, r27
    3a84:	54 c0       	rjmp	.+168    	; 0x3b2e <Calc_VidGetValues+0x604>
	}
	else if (index1 == 1 && index2 == 3)
    3a86:	80 91 a6 01 	lds	r24, 0x01A6
    3a8a:	81 30       	cpi	r24, 0x01	; 1
    3a8c:	09 f0       	breq	.+2      	; 0x3a90 <Calc_VidGetValues+0x566>
    3a8e:	4f c0       	rjmp	.+158    	; 0x3b2e <Calc_VidGetValues+0x604>
    3a90:	80 91 a8 01 	lds	r24, 0x01A8
    3a94:	83 30       	cpi	r24, 0x03	; 3
    3a96:	09 f0       	breq	.+2      	; 0x3a9a <Calc_VidGetValues+0x570>
    3a98:	4a c0       	rjmp	.+148    	; 0x3b2e <Calc_VidGetValues+0x604>
	{
		Value1 = Arr1[0];
    3a9a:	80 91 b9 01 	lds	r24, 0x01B9
    3a9e:	88 2f       	mov	r24, r24
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	a0 e0       	ldi	r26, 0x00	; 0
    3aa4:	b0 e0       	ldi	r27, 0x00	; 0
    3aa6:	bc 01       	movw	r22, r24
    3aa8:	cd 01       	movw	r24, r26
    3aaa:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3aae:	dc 01       	movw	r26, r24
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	80 93 ad 01 	sts	0x01AD, r24
    3ab6:	90 93 ae 01 	sts	0x01AE, r25
    3aba:	a0 93 af 01 	sts	0x01AF, r26
    3abe:	b0 93 b0 01 	sts	0x01B0, r27
		Value2 = Arr2[0]*100 + Arr2[1]*10 + Arr2[2];
    3ac2:	80 91 bc 01 	lds	r24, 0x01BC
    3ac6:	28 2f       	mov	r18, r24
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	84 e6       	ldi	r24, 0x64	; 100
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	28 9f       	mul	r18, r24
    3ad0:	a0 01       	movw	r20, r0
    3ad2:	29 9f       	mul	r18, r25
    3ad4:	50 0d       	add	r21, r0
    3ad6:	38 9f       	mul	r19, r24
    3ad8:	50 0d       	add	r21, r0
    3ada:	11 24       	eor	r1, r1
    3adc:	80 91 bd 01 	lds	r24, 0x01BD
    3ae0:	88 2f       	mov	r24, r24
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	9c 01       	movw	r18, r24
    3ae6:	22 0f       	add	r18, r18
    3ae8:	33 1f       	adc	r19, r19
    3aea:	c9 01       	movw	r24, r18
    3aec:	88 0f       	add	r24, r24
    3aee:	99 1f       	adc	r25, r25
    3af0:	88 0f       	add	r24, r24
    3af2:	99 1f       	adc	r25, r25
    3af4:	82 0f       	add	r24, r18
    3af6:	93 1f       	adc	r25, r19
    3af8:	9a 01       	movw	r18, r20
    3afa:	28 0f       	add	r18, r24
    3afc:	39 1f       	adc	r19, r25
    3afe:	80 91 be 01 	lds	r24, 0x01BE
    3b02:	88 2f       	mov	r24, r24
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	82 0f       	add	r24, r18
    3b08:	93 1f       	adc	r25, r19
    3b0a:	aa 27       	eor	r26, r26
    3b0c:	97 fd       	sbrc	r25, 7
    3b0e:	a0 95       	com	r26
    3b10:	ba 2f       	mov	r27, r26
    3b12:	bc 01       	movw	r22, r24
    3b14:	cd 01       	movw	r24, r26
    3b16:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	cb 01       	movw	r24, r22
    3b1e:	80 93 b1 01 	sts	0x01B1, r24
    3b22:	90 93 b2 01 	sts	0x01B2, r25
    3b26:	a0 93 b3 01 	sts	0x01B3, r26
    3b2a:	b0 93 b4 01 	sts	0x01B4, r27
	}
}
    3b2e:	cf 91       	pop	r28
    3b30:	df 91       	pop	r29
    3b32:	08 95       	ret

00003b34 <__udivmodsi4>:
    3b34:	a1 e2       	ldi	r26, 0x21	; 33
    3b36:	1a 2e       	mov	r1, r26
    3b38:	aa 1b       	sub	r26, r26
    3b3a:	bb 1b       	sub	r27, r27
    3b3c:	fd 01       	movw	r30, r26
    3b3e:	0d c0       	rjmp	.+26     	; 0x3b5a <__udivmodsi4_ep>

00003b40 <__udivmodsi4_loop>:
    3b40:	aa 1f       	adc	r26, r26
    3b42:	bb 1f       	adc	r27, r27
    3b44:	ee 1f       	adc	r30, r30
    3b46:	ff 1f       	adc	r31, r31
    3b48:	a2 17       	cp	r26, r18
    3b4a:	b3 07       	cpc	r27, r19
    3b4c:	e4 07       	cpc	r30, r20
    3b4e:	f5 07       	cpc	r31, r21
    3b50:	20 f0       	brcs	.+8      	; 0x3b5a <__udivmodsi4_ep>
    3b52:	a2 1b       	sub	r26, r18
    3b54:	b3 0b       	sbc	r27, r19
    3b56:	e4 0b       	sbc	r30, r20
    3b58:	f5 0b       	sbc	r31, r21

00003b5a <__udivmodsi4_ep>:
    3b5a:	66 1f       	adc	r22, r22
    3b5c:	77 1f       	adc	r23, r23
    3b5e:	88 1f       	adc	r24, r24
    3b60:	99 1f       	adc	r25, r25
    3b62:	1a 94       	dec	r1
    3b64:	69 f7       	brne	.-38     	; 0x3b40 <__udivmodsi4_loop>
    3b66:	60 95       	com	r22
    3b68:	70 95       	com	r23
    3b6a:	80 95       	com	r24
    3b6c:	90 95       	com	r25
    3b6e:	9b 01       	movw	r18, r22
    3b70:	ac 01       	movw	r20, r24
    3b72:	bd 01       	movw	r22, r26
    3b74:	cf 01       	movw	r24, r30
    3b76:	08 95       	ret

00003b78 <__divmodsi4>:
    3b78:	97 fb       	bst	r25, 7
    3b7a:	09 2e       	mov	r0, r25
    3b7c:	05 26       	eor	r0, r21
    3b7e:	0e d0       	rcall	.+28     	; 0x3b9c <__divmodsi4_neg1>
    3b80:	57 fd       	sbrc	r21, 7
    3b82:	04 d0       	rcall	.+8      	; 0x3b8c <__divmodsi4_neg2>
    3b84:	d7 df       	rcall	.-82     	; 0x3b34 <__udivmodsi4>
    3b86:	0a d0       	rcall	.+20     	; 0x3b9c <__divmodsi4_neg1>
    3b88:	00 1c       	adc	r0, r0
    3b8a:	38 f4       	brcc	.+14     	; 0x3b9a <__divmodsi4_exit>

00003b8c <__divmodsi4_neg2>:
    3b8c:	50 95       	com	r21
    3b8e:	40 95       	com	r20
    3b90:	30 95       	com	r19
    3b92:	21 95       	neg	r18
    3b94:	3f 4f       	sbci	r19, 0xFF	; 255
    3b96:	4f 4f       	sbci	r20, 0xFF	; 255
    3b98:	5f 4f       	sbci	r21, 0xFF	; 255

00003b9a <__divmodsi4_exit>:
    3b9a:	08 95       	ret

00003b9c <__divmodsi4_neg1>:
    3b9c:	f6 f7       	brtc	.-4      	; 0x3b9a <__divmodsi4_exit>
    3b9e:	90 95       	com	r25
    3ba0:	80 95       	com	r24
    3ba2:	70 95       	com	r23
    3ba4:	61 95       	neg	r22
    3ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    3baa:	9f 4f       	sbci	r25, 0xFF	; 255
    3bac:	08 95       	ret

00003bae <__prologue_saves__>:
    3bae:	2f 92       	push	r2
    3bb0:	3f 92       	push	r3
    3bb2:	4f 92       	push	r4
    3bb4:	5f 92       	push	r5
    3bb6:	6f 92       	push	r6
    3bb8:	7f 92       	push	r7
    3bba:	8f 92       	push	r8
    3bbc:	9f 92       	push	r9
    3bbe:	af 92       	push	r10
    3bc0:	bf 92       	push	r11
    3bc2:	cf 92       	push	r12
    3bc4:	df 92       	push	r13
    3bc6:	ef 92       	push	r14
    3bc8:	ff 92       	push	r15
    3bca:	0f 93       	push	r16
    3bcc:	1f 93       	push	r17
    3bce:	cf 93       	push	r28
    3bd0:	df 93       	push	r29
    3bd2:	cd b7       	in	r28, 0x3d	; 61
    3bd4:	de b7       	in	r29, 0x3e	; 62
    3bd6:	ca 1b       	sub	r28, r26
    3bd8:	db 0b       	sbc	r29, r27
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	f8 94       	cli
    3bde:	de bf       	out	0x3e, r29	; 62
    3be0:	0f be       	out	0x3f, r0	; 63
    3be2:	cd bf       	out	0x3d, r28	; 61
    3be4:	09 94       	ijmp

00003be6 <__epilogue_restores__>:
    3be6:	2a 88       	ldd	r2, Y+18	; 0x12
    3be8:	39 88       	ldd	r3, Y+17	; 0x11
    3bea:	48 88       	ldd	r4, Y+16	; 0x10
    3bec:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bee:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bf0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bf2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bf4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bf6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bf8:	b9 84       	ldd	r11, Y+9	; 0x09
    3bfa:	c8 84       	ldd	r12, Y+8	; 0x08
    3bfc:	df 80       	ldd	r13, Y+7	; 0x07
    3bfe:	ee 80       	ldd	r14, Y+6	; 0x06
    3c00:	fd 80       	ldd	r15, Y+5	; 0x05
    3c02:	0c 81       	ldd	r16, Y+4	; 0x04
    3c04:	1b 81       	ldd	r17, Y+3	; 0x03
    3c06:	aa 81       	ldd	r26, Y+2	; 0x02
    3c08:	b9 81       	ldd	r27, Y+1	; 0x01
    3c0a:	ce 0f       	add	r28, r30
    3c0c:	d1 1d       	adc	r29, r1
    3c0e:	0f b6       	in	r0, 0x3f	; 63
    3c10:	f8 94       	cli
    3c12:	de bf       	out	0x3e, r29	; 62
    3c14:	0f be       	out	0x3f, r0	; 63
    3c16:	cd bf       	out	0x3d, r28	; 61
    3c18:	ed 01       	movw	r28, r26
    3c1a:	08 95       	ret

00003c1c <_exit>:
    3c1c:	f8 94       	cli

00003c1e <__stop_program>:
    3c1e:	ff cf       	rjmp	.-2      	; 0x3c1e <__stop_program>
